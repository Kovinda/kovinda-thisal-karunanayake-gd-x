

// add multiple serviceaccounts as {}, {}, {}, random account will be selected by each time app is opened.
const serviceaccounts = [
{}
];
const randomserviceaccount = serviceaccounts[Math.floor(Math.random()*serviceaccounts.length)];

const authConfig = {
    "siteName": "Kovindas drive2", // Website name
    "client_id": "746239575955-oao9hkv614p8glrqpvuh5i8mqfoq145b.apps.googleusercontent.com", // Client id from Google Cloud Console
    "client_secret": "u5a1CSY5pNjdD2tGTU93TTnI", // Client Secret from Google Cloud Console
    "refresh_token": "1//09i311c3fMZ4VCgYIARAAGAkSNwF-L9IryEQ49XtI--Wes9nhVzD9cHFzLXgasUBA2VQx9ojYV4nDeeFg_1RgcbNACK4IdA6dlzQ", // Authorize token
    "service_account": false, // true if you're using Service Account instead of user account
    "service_account_json": randomserviceaccount, // don't touch this one
    "files_list_page_size": 50,
    "search_result_list_page_size": 50,
    "enable_cors_file_down": false,
    "enable_password_file_verify": true, // support for .password file
    "roots":[
      {
          "id": "0AFijDj_rsIAlUk9PVA",
          "name": "Kovinda2",
          "protect_file_link": false,
        //   "auth": {"kovinda":"1ringtorulethemall"} /* Remove double slash before "auth" to activate id password protection */
      },
    //   {
    //       "id": "root",
    //       "name": "Drive Two",
    //       "protect_file_link": false,
    //      // "auth": {"username":"password", "username1":"password1"} /* Remove double slash before "auth" to activate id password protection */
    //   },
    ]};


/*
███████╗██████╗░██╗████████╗  ████████╗██╗░░██╗███████╗░██████╗███████╗
██╔════╝██╔══██╗██║╚══██╔══╝  ╚══██╔══╝██║░░██║██╔════╝██╔════╝██╔════╝
█████╗░░██║░░██║██║░░░██║░░░  ░░░██║░░░███████║█████╗░░╚█████╗░█████╗░░
██╔══╝░░██║░░██║██║░░░██║░░░  ░░░██║░░░██╔══██║██╔══╝░░░╚═══██╗██╔══╝░░
███████╗██████╔╝██║░░░██║░░░  ░░░██║░░░██║░░██║███████╗██████╔╝███████╗
╚══════╝╚═════╝░╚═╝░░░╚═╝░░░  ░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═════╝░╚══════╝

██╗░░░██╗░█████╗░██╗░░░░░██╗░░░██╗███████╗░██████╗
██║░░░██║██╔══██╗██║░░░░░██║░░░██║██╔════╝██╔════╝
╚██╗░██╔╝███████║██║░░░░░██║░░░██║█████╗░░╚█████╗░
░╚████╔╝░██╔══██║██║░░░░░██║░░░██║██╔══╝░░░╚═══██╗
░░╚██╔╝░░██║░░██║███████╗╚██████╔╝███████╗██████╔╝
░░░╚═╝░░░╚═╝░░╚═╝╚══════╝░╚═════╝░╚══════╝╚═════╝░*/

const uiConfig = {
    "theme": "quartz", // switch between themes, default set to vapor, select from https://github.com/ParveenBhadooOfficial/Google-Drive-Index#themes
    "version": "2.0.18-beta.1", // don't touch this one. get latest code using generator at https://generator.driveindex.ga
    // If you're using Image then set to true, If you want text then set it to false
    "logo_image": true, // true if you're using image link in next option.
    "logo_height": "150px", // only if logo_image is true
    "logo_width": "200px", // only if logo_image is true
    "favicon": "https://cdn.jsdelivr.net/npm/drive-index-logo-kov@2.0.0/favicon.png",
    // if logo is true then link otherwise just text for name
    "logo_link_name": "https://cdn.jsdelivr.net/npm/drive-index-logo-kov@2.0.0/logo.png",
    "fixed_header": true, // If you want the footer to be flexible or fixed.
    "header_padding": "60", // Value 60 for fixed header, Value 20 for flexible header. Required to be changed accordingly in some themes.
    "fixed_footer": false, // If you want the footer to be flexible or fixed.
    "header_style_class": "navbar-dark bg-dark", // navbar-dark bg-primary || navbar-dark bg-dark || navbar-light bg-light
    "footer_style_class": "bg-dark", // bg-primary || bg-dark || bg-light
    "css_a_tag_color": "white", // Color Name or Hex Code eg. #ffffff
    "css_p_tag_color": "white", // Color Name or Hex Code eg. #ffffff
    "folder_text_color": "white", // Color Name or Hex Code eg. #ffffff
    "loading_spinner_class": "text-light", // https://getbootstrap.com/docs/5.0/components/spinners/#colors
    "search_button_class": "btn-success", // https://getbootstrap.com/docs/5.0/components/buttons/#examples
    "path_nav_alert_class": "alert alert-primary", // https://getbootstrap.com/docs/4.0/components/alerts/#examples
    "file_view_alert_class": "alert alert-danger", // https://getbootstrap.com/docs/4.0/components/alerts/#examples
    "file_count_alert_class": "alert alert-secondary", // https://getbootstrap.com/docs/4.0/components/alerts/#examples
    "contact_link": "https://t.me/kovinda_thisal", // Link to Contact Button on Menu
    "copyright_year": "2021", // year of copyright, can be anything like 2015 - 2020 or just 2020
    "company_name": "Kovinda Thisal Karunanayake", // Name next to copyright
    "company_link": "https://t.me/kovinda_thisal", // link of copyright name
    "credit": false, // Set this to true to give us credit
    "display_size": true, // Set this to false to hide display file size
    "display_time": false, // Set this to false to hide display modified time for folder and files
    "display_download": true, // Set this to false to hide download icon for folder and files on main index
    "disable_player": false, // Set this to true to hide audio and video players
    "custom_srt_lang": "", // Subtitle Language Code for Custom .vtt language.
    "disable_video_download": false, // Remove Download, Copy Button on Videos
    "second_domain_for_dl": false, // If you want to display other URL for Downloading to protect your main domain.
    "downloaddomain": "https://testing.fetchgoogleapi.workers.dev", // If "second_domain_for_dl": true then enter downloaddomain otherwise keep empty. eg. https://workers.workersname.workers.dev No Trailing '/'
    "poster": "https://cdn.jsdelivr.net/npm/drive-index-logo-kov@2.0.0/poster.jpg", // Video poster URL or see Readme to how to load from Drive
    "audioposter": "https://cdn.jsdelivr.net/npm/drive-index-logo-kov@2.0.0/music.jpg", // Video poster URL or see Readme to how to load from Drive
    "jsdelivr_cdn_src": "https://cdn.jsdelivr.net/gh/Kovinda/kovinda-thisal-karunanayake-gd-x", // If Project is Forked, then enter your Github repo
    "render_head_md": true, // Render Head.md
    "render_readme_md": true, // Render Readme.md
    "display_drive_link": false, // This will add a Link Button to Google Drive of that particular file.
    "plyr_io_version": "3.6.4", // Change plyr.io version in future when needed.
    "plyr_io_video_resolution": "16:9", // For reference, visit: https://github.com/sampotts/plyr#options
    "unauthorized_owner_link": "https://t.me/kovinda_thisal", // Unauthorized Error Page Link to Owner
    "unauthorized_owner_email": "A@sample.com", // Unauthorized Error Page Owner Email
    "arc_code": "jfoY2h19" // arc.io Integraion Code, get yours from https://portal.arc.io
};


/*
██████╗░░█████╗░  ███╗░░██╗░█████╗░████████╗  ███████╗██████╗░██╗████████╗
██╔══██╗██╔══██╗  ████╗░██║██╔══██╗╚══██╔══╝  ██╔════╝██╔══██╗██║╚══██╔══╝
██║░░██║██║░░██║  ██╔██╗██║██║░░██║░░░██║░░░  █████╗░░██║░░██║██║░░░██║░░░
██║░░██║██║░░██║  ██║╚████║██║░░██║░░░██║░░░  ██╔══╝░░██║░░██║██║░░░██║░░░
██████╔╝╚█████╔╝  ██║░╚███║╚█████╔╝░░░██║░░░  ███████╗██████╔╝██║░░░██║░░░
╚═════╝░░╚════╝░  ╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░  ╚══════╝╚═════╝░╚═╝░░░╚═╝░░░

██████╗░███████╗██╗░░░░░░█████╗░░██╗░░░░░░░██╗
██╔══██╗██╔════╝██║░░░░░██╔══██╗░██║░░██╗░░██║
██████╦╝█████╗░░██║░░░░░██║░░██║░╚██╗████╗██╔╝
██╔══██╗██╔══╝░░██║░░░░░██║░░██║░░████╔═████║░
██████╦╝███████╗███████╗╚█████╔╝░░╚██╔╝░╚██╔╝░
╚═════╝░╚══════╝╚══════╝░╚════╝░░░░╚═╝░░░╚═╝░░*/

// DON'T TOUCH BELOW THIS UNLESS YOU KNOW WHAT YOU'RE DOING
var gds = [];

function html(current_drive_order = 0, model = {}) {
    return `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no"/>
  <title>${authConfig.siteName}</title>
  <script async src="https://arc.io/widget.min.js#${uiConfig.arc_code}"></script>
  <meta name="robots" content="noindex" />
  <link rel="icon" href="${uiConfig.favicon}">
  <script>
    window.drive_names = JSON.parse('${JSON.stringify(authConfig.roots.map(it => it.name))}');
    window.MODEL = JSON.parse('${JSON.stringify(model)}');
    window.current_drive_order = ${current_drive_order};
    window.UI = JSON.parse('${JSON.stringify(uiConfig)}');
  </script>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <link rel="stylesheet" href="https://cdn.plyr.io/${uiConfig.plyr_io_version}/plyr.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.0.0/dist/${uiConfig.theme}/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
  <style>
  a {
      color: ${uiConfig.css_a_tag_color};
  }
  p {
      color: ${uiConfig.css_p_tag_color};
  }
  </style>
  <script src="${uiConfig.jsdelivr_cdn_src}@master/js/app.min.js"></script>

  <script src="https://cdn.jsdelivr.net/gh/mozilla/pdf.js@gh-pages/build/pdf.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>
<body>
</body>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8" crossorigin="anonymous"></script>
  <script src="https://cdn.plyr.io/${uiConfig.plyr_io_version}/plyr.polyfilled.js"></script>
</html>`;
};

const unauthorized = `<html>
<head>
   <title>401 - Unauthorized</title>
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="apple-touch-icon" sizes="180x180"
      href="https://cdn.jsdelivr.net/gh/Kovinda/res@master/img/K/apple-touch-icon.png">
   <link rel="icon" type="image/png" sizes="32x32"
      href="https://cdn.jsdelivr.net/gh/Kovinda/res@master/img/K/favicon-32x32.png">
   <link rel="icon" type="image/png" sizes="16x16"
      href="https://cdn.jsdelivr.net/gh/Kovinda/res@master/img/K/favicon-16x16.png">
   <link href="https://fonts.googleapis.com/css?family=Quicksand:300,400&display=swap" rel="stylesheet">
   <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
   <style>
      canvas {
         display: block;
         vertical-align: bottom;
      }

      #particles-js {
         position: absolute;
         width: 100%;
         height: 100%;
      }


      body {
         margin: 0;
         padding: 0;
         width: 100%;
         height: 100%;
         background-color: #ffffff;
         display: table;
         font-weight: 100;
         font-family: 'Quicksand', sans-serif;
      }


      .text {
         text-align: center;
         position: absolute;
         display: inline-block;
         top: 50%;
         right: 50%;
         transform: translate(50%, -50%);
         color: rgb(0, 0, 0);
         max-width: 90%;
         padding: 2em 3em;
         text-shadow: 0px 0px 10px #e97bff;
         font-family: "Open Sans", sans-serif;
      }
      h1 {
         font-size: 2.25em;
         font-weight: 700;
         letter-spacing: -1px;
      }

      .btn-grad {background-image: linear-gradient(to right, #b200fc 0%, #ff00bf  51%, #b200fc  100%)}
         .btn-grad {
            margin: 10px;
            padding: 0.5em 1em;
            text-align: center;
            /* text-transform: uppercase; */
            transition: 0.5s;
            background-size: 200% auto;
            color: rgb(0, 0, 0);            
            box-shadow: 0 0 20px rgb(255, 78, 211);
            border-radius: 10px;
            text-decoration: none;
            /* display: block; */
          }

          .btn-grad:hover {
            background-position: right center; /* change the direction of the change here */
            color: #fff;
            text-decoration: none;
          }
          


         
   </style>
</head>

<body>
   <div id="particles-js"></div>
   

   <div class="text" >
       
    <svg class="img" version="1.0" xmlns="http://www.w3.org/2000/svg"
    width="200.000000pt" height="200.000000pt" viewBox="0 0 200.000000 200.000000"
    preserveAspectRatio="xMidYMid meet">
   <g transform="translate(0.000000,200.000000) scale(0.100000,-0.100000)"
   fill="#000000" stroke="none">
   <path d="M830 1986 c0 -2 7 -7 16 -10 8 -3 12 -2 9 4 -6 10 -25 14 -25 6z"/>
   <path d="M1235 1980 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
   -8 -4 -11 -10z"/>
   <path d="M894 1969 c-2 -4 -22 -6 -44 -5 -22 0 -40 -3 -40 -8 0 -4 -11 -6 -25
   -4 -15 3 -22 1 -18 -5 4 -6 0 -8 -9 -4 -9 3 -20 1 -25 -4 -5 -5 -23 -11 -40
   -12 -17 -1 -29 -5 -26 -9 2 -5 -4 -8 -14 -8 -10 0 -27 -7 -37 -15 -17 -13 -21
   -12 -32 3 -12 15 -12 15 -7 -6 4 -18 2 -21 -12 -15 -13 4 -16 3 -11 -5 4 -7 2
   -12 -3 -12 -6 0 -33 -14 -61 -31 -27 -17 -54 -28 -60 -24 -6 4 -7 -1 -3 -12 3
   -10 3 -15 -1 -12 -4 4 -18 -4 -32 -18 -13 -13 -29 -21 -36 -17 -6 4 -8 3 -5
   -3 8 -13 -27 -46 -38 -36 -4 5 -5 3 -2 -4 4 -6 -3 -20 -15 -30 -13 -10 -36
   -36 -53 -58 -16 -22 -35 -46 -41 -53 -7 -6 -16 -21 -19 -32 -4 -11 -11 -18
   -16 -14 -5 3 -9 2 -8 -3 4 -21 -2 -34 -13 -27 -7 4 -8 3 -4 -4 7 -12 -31 -94
   -47 -100 -4 -2 -4 -8 -1 -13 3 -6 0 -17 -7 -25 -7 -9 -14 -23 -15 -32 -1 -10
   -9 -47 -18 -83 -19 -80 -25 -122 -27 -205 -1 -43 -5 -61 -13 -57 -6 4 -5 0 1
   -9 7 -8 15 -42 17 -74 2 -32 9 -70 14 -84 7 -20 6 -26 -7 -32 -14 -6 -14 -7 1
   -7 11 -1 15 -6 12 -16 -4 -8 -1 -15 6 -15 9 0 9 -4 -1 -17 -8 -9 -9 -14 -3
   -10 6 3 16 -5 22 -18 10 -21 9 -25 -4 -25 -8 0 -13 4 -9 9 3 5 1 12 -4 15 -5
   4 -8 -2 -7 -11 2 -10 13 -19 24 -21 12 -2 22 -8 22 -13 0 -6 -4 -8 -9 -4 -5 3
   -13 0 -17 -6 -4 -7 -3 -9 4 -5 6 3 18 -4 26 -16 14 -20 14 -24 -2 -42 -16 -19
   -16 -20 0 -7 24 18 41 6 28 -20 -6 -11 -15 -17 -20 -14 -5 3 -11 2 -14 -3 -8
   -13 27 -11 39 2 6 6 9 9 8 7 -1 -2 7 -15 17 -29 15 -18 17 -28 10 -37 -14 -17
   16 -49 38 -40 12 4 12 3 3 -9 -9 -11 -9 -14 3 -12 8 0 16 -3 17 -9 2 -5 13
   -18 26 -29 22 -17 23 -20 9 -35 -9 -10 -16 -21 -16 -26 0 -5 6 0 14 10 13 18
   15 18 40 2 15 -10 24 -22 21 -28 -4 -5 -11 -7 -16 -3 -5 3 -7 10 -4 15 4 5 2
   9 -4 9 -5 0 -11 -3 -14 -7 -2 -5 -2 -1 0 7 3 12 2 12 -8 3 -16 -16 4 -42 29
   -38 18 3 68 -20 89 -40 10 -11 10 -14 -3 -19 -10 -4 -13 -2 -8 6 5 7 3 8 -6 3
   -8 -5 -11 -4 -7 3 5 6 0 8 -13 5 -25 -7 -27 -21 -2 -19 11 0 16 -6 16 -17 -2
   -17 0 -17 23 -2 19 13 27 14 39 4 17 -14 18 -29 3 -29 -5 0 -7 5 -3 12 5 7 3
   8 -6 3 -9 -6 -11 -4 -5 6 7 12 6 12 -6 1 -12 -11 -11 -15 4 -23 9 -6 15 -14
   12 -20 -4 -5 -2 -9 3 -9 6 0 13 11 16 25 l6 25 22 -19 c11 -11 25 -18 30 -15
   4 3 12 -3 16 -13 7 -17 22 -25 49 -26 19 -1 5 -11 -17 -12 -11 -1 -16 3 -13 9
   4 6 -2 4 -13 -4 -10 -8 -21 -16 -24 -18 -2 -2 11 0 29 3 29 5 32 4 22 -9 -9
   -11 -9 -16 0 -22 7 -4 9 -3 5 4 -3 6 3 16 14 22 11 6 20 7 20 3 0 -4 5 -1 10
   7 7 11 10 11 10 2 0 -7 5 -10 12 -6 6 4 8 3 4 -4 -3 -6 -2 -13 4 -17 5 -3 10
   -1 10 6 0 8 4 8 15 -1 9 -7 18 -10 22 -6 3 3 15 -2 26 -11 10 -10 21 -17 23
   -15 10 6 34 1 34 -8 0 -12 -22 -9 -32 5 -5 6 -8 4 -8 -5 0 -13 -1 -13 -10 0
   -7 12 -9 10 -7 -7 0 -12 3 -20 6 -18 2 3 10 0 18 -7 7 -6 16 -8 20 -4 3 3 1 6
   -6 6 -7 0 -9 5 -6 11 5 7 13 5 25 -6 15 -14 18 -14 30 0 8 9 20 13 33 9 13 -4
   17 -2 13 5 -5 7 -1 9 8 5 25 -10 19 -23 -9 -19 -14 1 -27 -1 -30 -4 -2 -4 39
   -7 91 -6 68 0 90 3 80 10 -11 8 -5 11 25 11 22 0 34 -3 27 -7 -7 -4 -16 -5
   -20 -3 -4 3 -8 1 -8 -3 0 -12 221 -10 240 2 15 9 36 14 76 17 21 2 21 3 5 27
   -9 14 -11 22 -4 18 6 -4 14 -1 17 5 3 7 4 4 3 -7 -1 -12 3 -19 12 -17 9 2 11
   -3 7 -15 -6 -17 -5 -17 7 -1 8 10 18 14 22 10 5 -4 5 -2 2 4 -4 7 1 18 10 25
   15 12 16 12 10 -3 -3 -10 -2 -20 4 -23 5 -4 9 -3 8 2 -1 4 -1 16 0 27 1 16 3
   16 17 6 12 -11 15 -11 12 1 -2 9 5 14 18 13 14 0 20 4 17 13 -4 9 -10 10 -23
   3 -9 -5 -21 -6 -25 -2 -5 4 -5 0 0 -8 5 -8 4 -12 0 -7 -5 4 -19 0 -32 -8 -14
   -9 -23 -11 -23 -5 0 6 -5 8 -11 5 -6 -4 -8 -13 -6 -19 3 -7 -1 -13 -9 -13 -12
   0 -12 3 0 21 8 12 22 20 31 18 10 -2 14 1 10 7 -3 6 0 9 8 5 8 -3 19 2 26 10
   7 8 20 12 28 9 11 -4 14 -2 9 6 -4 6 -4 11 1 10 21 -4 34 2 27 13 -4 7 -3 8 5
   4 8 -5 9 -12 2 -20 -7 -8 -6 -17 1 -26 8 -12 9 -12 4 2 -6 20 10 34 17 16 4
   -10 6 -10 6 0 1 7 5 10 11 7 6 -3 7 1 4 9 -6 15 12 22 41 16 5 -1 7 2 3 6 -5
   4 2 12 15 19 12 6 21 16 20 22 -1 6 12 18 30 27 18 8 26 16 19 16 -7 0 -10 4
   -7 10 4 6 -1 7 -11 3 -12 -4 -15 -3 -10 5 4 7 19 12 34 12 22 0 24 -2 12 -11
   -12 -9 -12 -10 3 -5 10 3 22 6 25 6 4 1 -4 7 -17 14 l-24 13 36 38 c30 32 37
   36 43 22 3 -9 10 -17 15 -17 5 0 1 12 -8 27 -10 15 -12 24 -5 20 7 -5 12 -3
   12 3 0 7 14 32 30 57 17 24 40 63 52 86 21 40 23 46 27 65 1 4 6 0 12 -8 8
   -11 9 -8 4 13 -4 21 -3 27 6 21 9 -5 10 -2 5 11 -4 10 -2 21 5 25 6 4 13 26
   14 50 2 25 11 48 22 57 10 8 12 12 6 8 -7 -3 -13 -1 -13 4 0 6 6 11 13 11 8 0
   7 4 -3 10 -8 5 -10 10 -5 10 6 0 11 10 11 23 1 123 5 158 17 151 9 -6 9 -4 1
   7 -6 8 -12 30 -13 49 -2 34 -4 53 -16 135 -3 21 -20 80 -37 130 -16 49 -31 95
   -31 102 0 7 -4 10 -8 8 -10 -7 -20 25 -12 37 3 7 1 8 -5 4 -7 -4 -12 -3 -12 3
   0 5 -15 31 -32 57 -18 25 -37 53 -43 62 -5 9 -16 22 -24 28 -8 6 -11 16 -7 23
   5 7 2 10 -6 9 -7 -2 -12 3 -10 10 1 8 -2 11 -6 8 -12 -7 -44 28 -35 38 5 4 1
   6 -7 4 -8 -2 -14 3 -12 10 1 8 -2 11 -8 7 -5 -3 -13 1 -16 9 -3 9 -10 14 -14
   11 -5 -3 -12 1 -17 8 -4 8 -18 19 -30 26 -13 6 -23 19 -23 29 0 10 -3 13 -8 6
   -5 -7 -18 -3 -39 12 -18 12 -29 25 -25 28 3 4 -1 4 -11 0 -11 -4 -19 0 -23 9
   -3 9 -12 13 -20 10 -7 -3 -16 2 -20 10 -3 9 -12 13 -19 11 -7 -3 -16 -1 -20 5
   -3 6 -15 11 -26 11 -11 0 -18 4 -15 9 4 5 -4 7 -16 3 -13 -3 -19 -1 -15 5 5 7
   0 9 -12 6 -10 -3 -22 0 -25 6 -4 5 -14 7 -23 4 -10 -4 -14 -2 -10 4 5 7 0 9
   -13 6 -13 -4 -27 1 -36 13 -9 11 -13 13 -9 6 5 -9 -4 -11 -37 -7 -65 9 -239
   11 -244 4z m86 -108 c0 12 2 12 9 1 4 -8 12 -14 16 -14 4 0 12 6 16 14 5 7 9
   8 9 2 0 -6 16 -11 37 -10 24 1 38 -4 40 -14 4 -13 3 -13 -6 0 -7 9 -11 10 -11
   3 0 -6 -9 -11 -20 -10 -11 1 -20 5 -20 10 0 5 -8 3 -17 -4 -9 -8 -14 -9 -10
   -3 4 7 -3 10 -18 10 -34 -2 -36 -8 -16 -35 13 -17 18 -19 18 -7 0 9 -4 16 -9
   16 -5 0 -6 5 -2 12 5 8 14 4 27 -13 13 -16 18 -18 14 -6 -4 9 -2 17 2 17 5 0
   11 -5 13 -11 3 -9 9 -9 25 0 14 7 24 8 28 1 3 -5 1 -10 -5 -10 -6 0 -8 -5 -4
   -11 4 -8 9 -7 15 2 5 8 9 10 9 5 0 -5 7 -3 15 4 8 7 13 16 10 20 -3 5 0 12 6
   16 8 4 9 3 5 -4 -4 -7 -2 -12 3 -12 6 0 11 6 12 13 0 9 2 9 6 -1 2 -6 10 -9
   15 -6 7 4 8 2 4 -4 -5 -9 3 -11 28 -7 27 5 37 2 44 -12 5 -10 7 -24 5 -30 -6
   -16 -3 -16 40 2 l34 14 -2 -28 c-2 -26 0 -29 23 -25 23 5 24 3 11 -13 -13 -16
   -12 -17 3 -4 20 15 14 35 -9 27 -9 -4 -11 -2 -7 6 5 7 3 8 -6 3 -9 -5 -11 -4
   -6 3 5 9 13 9 29 0 12 -7 24 -13 27 -13 3 0 19 -9 37 -18 36 -19 58 -51 47
   -69 -4 -7 -3 -8 4 -4 7 4 12 2 12 -4 0 -6 5 -8 10 -5 6 4 4 12 -5 21 -32 32
   -13 24 38 -16 28 -23 52 -46 52 -52 0 -5 11 -15 24 -22 20 -11 21 -14 7 -19
   -11 -5 -15 -3 -10 5 4 7 3 8 -4 4 -18 -11 -14 -22 13 -34 16 -7 23 -17 19 -27
   -3 -8 -2 -15 4 -15 16 0 7 31 -13 46 -10 8 -14 14 -8 14 16 0 62 -52 106 -120
   17 -27 17 -29 0 -45 -16 -17 -16 -17 4 -11 18 6 25 1 38 -24 13 -25 14 -34 4
   -46 -9 -12 -9 -13 3 -9 9 4 19 -4 27 -21 10 -22 9 -28 -6 -40 -17 -13 -17 -14
   1 -7 16 5 18 3 13 -11 -4 -10 -3 -15 3 -11 6 3 11 -1 11 -9 1 -9 2 -22 3 -28
   1 -7 -2 -19 -7 -26 -7 -9 -5 -11 9 -5 17 6 18 5 4 -12 -8 -10 -10 -16 -3 -12
   7 5 12 1 12 -10 0 -10 2 -44 4 -76 3 -33 2 -55 -4 -52 -5 4 -9 1 -9 -4 0 -6 4
   -11 9 -11 6 0 8 -10 5 -22 -3 -13 -5 -38 -5 -57 0 -18 -3 -39 -6 -45 -4 -6 -8
   -15 -8 -21 -2 -31 -18 -95 -24 -95 -4 0 -8 -10 -8 -22 -1 -13 -7 -24 -12 -26
   -5 -2 -7 -10 -4 -18 3 -8 0 -14 -7 -14 -6 0 -9 -4 -5 -10 3 -5 -3 -18 -13 -28
   -10 -10 -16 -24 -14 -30 2 -7 -1 -12 -7 -12 -6 0 -11 -4 -11 -9 0 -14 -52 -91
   -62 -91 -4 0 -8 -5 -8 -11 0 -15 -107 -119 -114 -112 -3 4 -6 2 -6 -4 0 -10
   -53 -52 -124 -97 -19 -12 -26 -13 -21 -5 4 8 1 7 -7 -1 -13 -16 -101 -57 -135
   -63 -10 -2 -25 -7 -33 -10 -8 -4 -37 -11 -65 -16 -40 -8 -53 -6 -67 5 -12 12
   -18 12 -24 3 -4 -7 -3 -10 4 -5 6 3 13 2 16 -3 9 -14 -31 -20 -45 -7 -7 6 -9
   7 -6 0 4 -6 -10 -10 -38 -10 -26 1 -41 5 -37 11 3 5 -1 4 -10 -3 -9 -7 -19 -9
   -22 -4 -3 5 -24 8 -47 6 -29 -2 -39 1 -36 10 3 7 -1 13 -9 13 -7 0 -10 -5 -7
   -10 4 -6 -3 -7 -18 -3 -33 10 -39 11 -79 20 -19 5 -40 12 -46 18 -7 5 -23 11
   -35 13 -13 3 -25 9 -27 15 -2 5 -11 10 -20 10 -20 0 -82 42 -82 55 0 6 14 23
   30 38 22 21 30 38 30 63 0 21 4 33 10 29 6 -3 10 -2 10 4 0 5 -6 11 -12 14
   -10 3 -9 8 2 22 9 12 10 16 2 11 -9 -6 -11 -1 -8 18 3 14 7 30 11 36 3 5 2 10
   -2 10 -5 0 -7 16 -5 35 3 22 8 33 16 28 6 -3 8 -3 4 2 -4 4 -2 15 5 24 11 14
   10 14 -6 2 -17 -14 -18 -13 -15 5 1 10 10 25 18 32 8 7 11 12 5 11 -25 -3 -27
   2 -9 23 10 12 13 18 6 14 -10 -6 -12 4 -9 42 2 27 7 54 11 60 4 7 2 12 -4 12
   -6 0 -8 5 -4 12 4 6 9 41 12 77 2 36 9 69 16 73 8 5 7 8 -3 8 -11 0 -11 3 0
   17 8 9 9 14 3 10 -12 -7 -11 1 1 78 3 22 7 66 8 97 1 32 6 58 11 58 4 0 6 9 3
   20 -3 11 0 20 6 20 8 0 8 3 0 11 -12 12 -6 42 6 35 4 -3 8 5 8 17 2 17 0 19
   -7 7 -8 -13 -10 -12 -10 3 0 9 3 17 8 17 4 0 8 17 9 37 3 74 8 103 18 103 5 0
   3 5 -5 10 -8 5 -10 10 -5 10 6 0 12 14 13 32 2 18 7 35 13 39 8 4 8 9 -1 14
   -8 5 -6 13 7 28 10 11 13 18 8 14 -6 -3 -11 3 -11 14 0 10 5 19 10 19 5 0 6 3
   3 6 -12 12 -87 -48 -87 -68 0 -11 -5 -28 -10 -39 -8 -14 -7 -19 2 -19 8 0 9
   -3 3 -8 -6 -4 -11 -18 -12 -32 -1 -14 -5 -45 -9 -70 -4 -25 -7 -57 -7 -72 1
   -16 -3 -28 -7 -28 -4 0 -6 -13 -4 -30 2 -16 0 -31 -4 -34 -5 -3 -7 -21 -6 -41
   2 -24 0 -33 -8 -29 -7 5 -8 2 -2 -7 7 -12 7 -43 -2 -104 -1 -11 -3 -20 -4 -20
   -2 0 -4 -32 -11 -137 -1 -21 -7 -38 -13 -38 -6 0 -6 -4 1 -11 8 -8 8 -20 3
   -34 -5 -13 -6 -26 -2 -30 3 -3 0 -10 -8 -15 -11 -7 -11 -10 -2 -10 8 0 10 -8
   6 -24 -5 -23 -14 -128 -14 -174 0 -14 -4 -20 -11 -16 -8 5 -8 1 0 -13 6 -11 8
   -23 6 -25 -3 -3 -6 -30 -7 -61 -1 -32 -7 -57 -13 -57 -5 0 -3 -5 5 -10 8 -5
   10 -10 5 -10 -6 0 -11 -24 -10 -55 0 -50 -5 -60 -28 -56 -5 1 -6 -3 -2 -9 3
   -6 10 -8 15 -5 4 3 10 -4 13 -15 5 -20 5 -20 -24 1 -16 11 -27 25 -23 30 3 5
   1 8 -4 7 -27 -8 -202 184 -202 220 0 7 -4 12 -9 12 -10 0 -21 27 -20 44 0 5
   -4 12 -9 15 -6 3 -12 15 -14 26 -1 11 -7 23 -11 26 -5 4 -10 18 -10 32 -1 14
   -5 23 -8 21 -7 -4 -27 82 -35 151 -11 103 -11 120 0 134 8 11 8 13 0 8 -12 -7
   -11 34 3 103 3 19 6 39 4 43 -1 5 7 16 17 25 10 9 12 13 5 8 -10 -6 -12 -4
   -10 10 6 40 61 171 85 202 13 17 20 32 16 32 -5 0 -1 7 9 14 10 8 18 17 17 20
   -1 14 44 65 53 59 6 -4 8 0 4 10 -3 9 -3 16 1 14 4 -1 7 0 7 3 0 3 20 23 45
   45 25 22 55 51 67 65 13 14 23 21 23 16 0 -5 9 -1 20 9 11 10 20 14 20 10 0
   -5 6 -1 13 9 12 16 14 16 26 2 8 -9 18 -16 23 -16 5 0 2 7 -6 16 -9 8 -13 21
   -9 27 5 8 9 7 11 -5 2 -12 12 -16 37 -15 18 1 31 5 28 10 -2 4 -8 5 -13 2 -5
   -3 -11 -1 -14 4 -3 5 1 12 10 15 9 3 12 11 8 18 -4 7 -4 10 1 6 4 -4 14 -3 21
   2 16 14 56 22 49 9 -4 -5 -11 -6 -17 -3 -7 4 -8 2 -4 -4 5 -8 1 -10 -11 -6
   -14 4 -15 4 -4 -4 7 -5 18 -16 23 -23 7 -11 8 -9 6 5 -2 10 3 21 11 24 10 3
   11 0 5 -9 -7 -12 -5 -12 9 0 9 7 23 11 31 8 10 -4 13 -1 10 8 -6 16 -25 16
   -36 0 -4 -6 -8 -2 -8 8 0 9 5 18 10 18 11 2 25 5 38 9 4 1 11 2 16 1 4 -1 14
   4 22 10 11 9 14 8 14 -1 0 -9 6 -8 19 4 19 17 20 17 31 -4 8 -15 8 -20 1 -16
   -6 4 -11 2 -11 -4 0 -7 6 -10 13 -7 6 2 11 13 11 24 -1 16 4 20 23 18 13 -1
   26 2 29 7 3 5 12 4 20 -3 11 -9 14 -8 14 2z m150 -41 c0 -5 -2 -10 -4 -10 -3
   0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m162 -32 c-8 -8 -9 -4 -5 13
   4 13 8 18 11 10 2 -7 -1 -18 -6 -23z m-671 -21 c-6 -8 -8 -17 -4 -20 3 -4 1
   -7 -5 -7 -14 0 -14 2 -6 24 3 9 11 16 16 16 7 0 6 -5 -1 -13z m-426 -1318 c11
   -17 -1 -21 -15 -4 -8 9 -8 15 -2 15 6 0 14 -5 17 -11z m1460 -199 c-4 -6 -11
   -8 -16 -5 -8 6 -13 -8 -10 -27 0 -4 -16 -15 -37 -23 -20 -9 -42 -22 -48 -31
   -10 -13 -12 -13 -18 1 -3 9 -2 13 3 10 6 -3 14 3 20 12 6 10 11 14 11 9 0 -5
   9 3 21 18 11 14 24 24 29 21 4 -3 10 2 14 10 3 8 13 15 21 15 9 0 13 -5 10
   -10z m-334 -197 c15 -15 -8 -12 -36 5 -19 11 -19 12 3 9 12 -2 27 -8 33 -14z
   m-65 -9 c-1 -8 -5 -17 -9 -21 -11 -10 -117 -12 -123 -2 -5 9 -1 11 44 13 15 1
   33 5 41 10 10 6 12 5 7 -2 -5 -8 1 -12 15 -12 17 0 19 3 10 13 -8 10 -7 14 3
   14 8 0 13 -6 12 -13z m-462 -26 c-9 -14 -23 2 -17 18 4 12 8 13 14 3 4 -7 5
   -17 3 -21z m496 22 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6
   0 10 -4 10 -10z m-380 -18 c0 -5 -7 -9 -15 -9 -8 0 -12 4 -9 9 7 10 24 10 24
   0z m40 4 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25 14 25 6z m160 -5 c0
   -4 -11 -7 -24 -7 -14 0 -23 3 -21 6 5 9 45 10 45 1z"/>
   <path d="M944 1845 c-5 -12 -9 -13 -14 -5 -4 7 -13 9 -19 6 -6 -4 -9 -12 -5
   -17 3 -5 2 -16 -3 -22 -4 -7 0 -5 9 5 19 21 26 22 48 5 13 -10 13 -10 2 5 -10
   13 -10 17 0 20 9 3 9 6 0 12 -7 4 -15 1 -18 -9z"/>
   <path d="M852 1837 c-7 -8 -26 -13 -42 -12 -37 2 -46 -8 -23 -26 12 -10 14
   -10 9 -1 -4 7 -1 12 9 12 9 0 14 -4 11 -8 -3 -5 1 -9 9 -9 11 0 12 4 4 14 -16
   19 -3 16 17 -4 17 -17 18 -17 11 1 -5 12 -3 22 5 27 7 4 10 11 7 14 -4 3 -11
   -1 -17 -8z"/>
   <path d="M1170 1812 c0 -14 7 -20 23 -21 44 -1 57 -4 57 -15 0 -6 4 -4 10 4
   13 21 -8 41 -38 35 -14 -2 -32 1 -39 7 -10 8 -13 6 -13 -10z m84 -10 c3 -5 -1
   -9 -9 -9 -8 0 -15 4 -15 9 0 4 4 8 9 8 6 0 12 -4 15 -8z"/>
   <path d="M656 1771 c-4 -5 -2 -12 3 -15 5 -4 12 -2 15 3 4 5 2 12 -3 15 -5 4
   -12 2 -15 -3z"/>
   <path d="M1304 1768 c-4 -6 -3 -8 4 -4 6 3 13 -2 15 -11 4 -14 5 -13 6 5 1 23
   -13 30 -25 10z"/>
   <path d="M1406 1734 c-9 -22 -7 -31 3 -16 12 20 56 -4 58 -31 2 -22 2 -22 -13
   -2 -12 15 -15 16 -12 4 4 -19 -64 -87 -81 -81 -6 2 -9 -3 -5 -12 6 -14 -5 -21
   -28 -17 -5 0 -7 -5 -5 -11 1 -7 -5 -11 -13 -10 -8 2 -12 0 -7 -4 9 -10 -22
   -44 -40 -44 -8 0 -12 -3 -10 -7 2 -5 -6 -18 -19 -31 -13 -12 -24 -19 -24 -15
   -1 4 -7 -3 -15 -17 -7 -14 -15 -23 -18 -20 -2 3 -17 -11 -33 -30 -16 -19 -33
   -37 -37 -38 -4 -2 -28 -24 -52 -48 -25 -24 -50 -44 -56 -44 -5 0 -7 -4 -4 -10
   3 -5 -1 -10 -9 -10 -9 0 -16 -7 -16 -15 0 -8 -3 -15 -7 -15 -5 0 -16 -13 -25
   -29 -15 -28 -15 -29 0 -23 15 5 15 4 3 -11 -9 -11 -10 -17 -2 -17 6 0 11 -5
   11 -11 0 -5 -4 -7 -10 -4 -5 3 -10 2 -10 -3 0 -14 28 -23 35 -12 4 6 11 10 17
   10 6 0 6 -7 -3 -17 -7 -10 1 -4 18 12 33 32 35 39 9 29 -9 -3 -13 -11 -9 -17
   4 -6 1 -7 -6 -3 -19 12 19 46 39 35 12 -5 16 -2 17 14 2 17 0 19 -7 7 -6 -10
   -10 -11 -10 -3 0 7 14 22 30 35 17 12 30 27 30 34 0 7 8 10 20 7 12 -3 20 0
   20 6 0 7 -5 9 -12 5 -7 -4 -8 -3 -4 4 4 7 14 12 22 12 10 0 12 -5 8 -12 -6
   -10 -5 -10 8 -1 8 7 19 9 23 5 5 -4 5 -1 1 6 -8 14 11 45 23 38 11 -7 36 12
   27 21 -5 4 -11 2 -13 -5 -3 -6 -8 -10 -13 -7 -5 3 -17 -6 -28 -20 -11 -13 -22
   -22 -25 -19 -7 7 38 54 52 54 7 0 10 4 6 9 -6 10 13 26 30 26 6 0 11 6 11 13
   3 26 5 26 24 2 15 -18 18 -20 13 -6 -5 14 -3 17 7 11 9 -5 11 -4 6 4 -4 6 -12
   9 -17 6 -5 -4 -9 -2 -9 3 0 6 7 13 16 16 8 3 12 10 9 16 -3 6 1 7 10 4 12 -5
   16 -2 13 12 -2 10 2 19 7 20 21 2 45 17 40 25 -3 4 5 13 17 20 13 7 29 20 36
   31 7 10 20 18 28 18 8 0 12 5 9 10 -3 6 -1 10 6 10 7 0 10 13 7 35 -4 39 -5
   39 25 24 21 -10 21 -10 2 6 -10 8 -19 27 -20 40 0 32 -60 73 -69 49z"/>
   <path d="M547 1715 c-4 -9 -11 -14 -16 -11 -5 3 -14 -1 -21 -9 -7 -8 -17 -12
   -24 -8 -6 3 -8 3 -4 -2 4 -4 -10 -21 -32 -37 -23 -17 -37 -35 -34 -42 3 -8 -1
   -13 -8 -13 -7 1 -14 -2 -15 -6 -1 -5 -9 -14 -19 -21 -13 -10 -14 -15 -4 -21 9
   -6 11 -4 5 5 -6 10 -4 12 7 7 21 -8 30 3 17 20 -9 10 -8 13 7 10 11 -1 26 -7
   34 -12 13 -8 13 -7 1 9 -12 14 -12 19 -2 26 11 6 11 9 0 13 -10 4 -9 6 4 6 9
   1 17 7 17 14 0 8 4 7 10 -3 9 -13 12 -13 23 1 6 9 19 14 27 11 9 -3 8 1 -4 10
   -13 10 -15 17 -8 22 7 4 12 2 12 -5 0 -6 9 -1 20 12 10 13 19 19 20 14 0 -6
   -4 -16 -10 -23 -5 -7 -3 -6 6 2 12 10 14 19 7 31 -9 16 -10 16 -16 0z m-53
   -60 c-4 -8 -11 -12 -16 -9 -6 4 -5 10 3 15 19 12 19 11 13 -6z"/>
   <path d="M875 1690 c-4 -6 -11 -7 -17 -4 -6 4 -8 2 -5 -3 6 -10 -19 -28 -35
   -25 -4 1 -5 -5 -2 -13 4 -10 0 -15 -12 -15 -16 0 -17 -2 -4 -10 12 -8 12 -10
   1 -10 -10 0 -11 -3 -2 -13 6 -8 8 -17 4 -21 -4 -4 -9 -19 -11 -34 -2 -15 -8
   -29 -13 -30 -6 -3 -5 -9 2 -18 9 -11 8 -14 -7 -14 -11 0 -15 -4 -9 -8 13 -9
   18 -42 7 -42 -5 0 -8 -10 -7 -22 1 -13 -3 -26 -9 -30 -7 -5 -7 -8 2 -8 7 0 10
   -4 7 -10 -7 -11 -17 -81 -18 -122 0 -16 -3 -28 -6 -28 -3 0 -7 -17 -7 -38 -1
   -35 -8 -110 -20 -232 -3 -30 -5 -64 -5 -75 0 -11 -5 -23 -12 -27 -7 -4 -7 -8
   -2 -8 8 0 13 -54 5 -62 -1 -2 -4 -37 -6 -77 -3 -41 -10 -82 -17 -90 -7 -9 -7
   -12 -1 -8 7 4 11 -7 10 -33 -1 -27 -5 -39 -13 -36 -7 3 -15 1 -18 -5 -4 -5 -1
   -8 7 -7 7 2 12 -3 11 -9 -2 -7 2 -13 8 -13 6 0 1 -9 -12 -20 -13 -11 -18 -19
   -10 -18 7 2 16 -3 18 -9 3 -8 -3 -13 -14 -14 -16 0 -16 -1 2 -9 11 -5 15 -9 9
   -9 -7 -1 -15 -8 -18 -17 -3 -8 -2 -13 3 -10 5 3 12 -1 15 -10 3 -8 2 -12 -3
   -9 -18 10 -21 -13 -4 -26 12 -10 14 -10 9 -1 -4 6 -2 12 3 12 6 0 11 -4 11
   -10 0 -5 5 -10 11 -10 8 0 7 5 -1 15 -7 9 -11 17 -9 18 2 1 14 11 27 21 25 22
   30 15 6 -9 -13 -13 -14 -19 -5 -28 10 -9 12 -9 9 3 -2 8 3 14 9 13 7 -2 12 0
   11 5 -1 4 1 23 5 42 6 27 10 32 17 20 6 -9 10 -10 10 -3 0 6 -5 15 -10 18 -8
   5 -8 11 -1 19 6 7 8 16 4 20 -12 12 -14 48 -2 40 8 -5 8 -1 0 13 -6 11 -8 22
   -6 25 2 2 7 40 10 84 3 43 7 104 9 134 2 30 4 70 5 88 1 24 5 31 14 26 9 -6 9
   -4 1 7 -13 15 -13 57 -1 76 4 6 3 14 -2 18 -6 3 -8 12 -5 20 4 8 11 12 17 8 6
   -4 7 -1 2 7 -11 17 -13 60 -3 60 3 0 5 12 2 27 -3 15 0 30 8 34 10 7 10 9 -1
   9 -10 0 -10 5 3 25 9 14 13 25 8 25 -15 0 -10 34 7 48 9 8 11 11 5 8 -7 -3
   -15 1 -18 10 -4 11 -2 15 7 11 8 -3 14 1 14 9 0 7 -3 11 -7 9 -4 -3 -5 10 -3
   28 3 17 6 47 7 65 1 18 8 37 16 42 12 8 13 10 1 10 -11 0 -9 5 5 22 15 19 16
   20 2 9 -11 -8 -18 -9 -18 -3 0 6 4 13 8 16 4 2 9 22 10 43 2 21 7 56 13 78 15
   60 17 85 8 85 -4 0 -11 -5 -14 -10z"/>
   <path d="M1526 1645 c-3 -8 -2 -14 2 -14 20 3 25 -2 12 -12 -13 -9 -13 -10 1
   -6 11 4 21 -4 29 -21 7 -16 14 -22 17 -14 3 6 10 9 16 5 7 -3 8 -2 4 3 -5 5
   -14 9 -19 9 -6 0 -13 6 -16 13 -2 8 2 10 15 5 10 -4 4 5 -13 20 -37 31 -40 32
   -48 12z m35 -12 c13 -16 12 -17 -3 -4 -10 7 -18 15 -18 17 0 8 8 3 21 -13z"/>
   <path d="M1426 1541 c-3 -5 1 -14 9 -21 10 -9 15 -9 15 -1 0 6 -5 11 -11 11
   -5 0 -7 5 -4 10 3 6 4 10 1 10 -3 0 -7 -4 -10 -9z"/>
   <path d="M337 1522 c4 -9 2 -13 -4 -9 -6 4 -19 -3 -29 -15 -11 -12 -14 -18 -7
   -15 6 4 13 1 16 -5 2 -7 8 -9 13 -5 5 4 2 12 -6 17 -14 9 -7 14 13 11 4 -1 10
   6 13 14 5 13 9 13 23 3 13 -10 14 -10 4 2 -18 20 -43 22 -36 2z"/>
   <path d="M1410 1511 c0 -6 -3 -10 -7 -10 -20 3 -30 -2 -30 -16 0 -15 26 -30
   35 -20 3 3 0 5 -6 5 -7 0 -12 7 -12 16 0 8 4 13 8 10 4 -2 14 -1 21 3 9 6 10
   11 2 15 -6 4 -11 2 -11 -3z"/>
   <path d="M1670 1489 c-13 -10 -13 -10 0 -6 19 6 45 -19 27 -26 -9 -4 -9 -6 0
   -6 21 -2 23 16 5 32 -13 12 -21 13 -32 6z"/>
   <path d="M283 1462 c-8 -5 -6 -14 8 -32 17 -21 19 -22 10 -3 -14 28 -14 36 1
   27 7 -4 8 -3 4 4 -8 14 -8 14 -23 4z"/>
   <path d="M1345 1459 c-4 -5 -11 -6 -17 -3 -7 5 -8 2 -4 -5 5 -7 0 -22 -11 -34
   -10 -12 -11 -16 -3 -10 8 6 20 13 25 14 6 2 9 10 7 17 -2 8 1 12 5 9 5 -3 15
   -2 22 2 10 6 9 10 -3 14 -8 3 -18 2 -21 -4z"/>
   <path d="M1724 1433 c2 -9 8 -18 15 -19 6 -1 7 0 1 3 -5 2 -8 9 -5 13 3 5 1
   11 -4 14 -5 4 -8 -2 -7 -11z"/>
   <path d="M251 1406 c-18 -20 -20 -24 -7 -29 9 -3 18 -1 22 5 4 7 3 8 -4 4 -17
   -11 -14 5 5 26 24 27 10 22 -16 -6z"/>
   <path d="M223 1352 c-7 -12 -8 -24 -2 -33 8 -11 9 -9 7 6 -2 11 2 19 9 18 7
   -2 10 4 7 12 -8 19 -7 19 -21 -3z"/>
   <path d="M1245 1360 c-4 -6 -10 -8 -15 -5 -5 3 -12 0 -16 -7 -4 -7 -4 -10 1
   -6 4 4 14 3 22 -4 11 -9 13 -8 11 3 -2 8 3 13 10 11 8 -1 11 2 7 8 -8 13 -12
   13 -20 0z"/>
   <path d="M1761 1351 c-8 -5 -9 -11 -3 -15 5 -3 12 1 16 9 6 17 6 18 -13 6z"/>
   <path d="M1797 1271 c-4 -17 -3 -21 5 -13 5 5 8 16 6 23 -3 8 -7 3 -11 -10z"/>
   <path d="M186 1263 c-6 -14 -5 -15 5 -6 7 7 10 15 7 18 -3 3 -9 -2 -12 -12z"/>
   <path d="M1100 1220 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
   -4 -4 -4 -10z"/>
   <path d="M1130 1219 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
   -5 -10 -11z"/>
   <path d="M1080 1199 c0 -5 -4 -8 -9 -4 -5 3 -12 2 -15 -3 -2 -4 6 -8 19 -8 15
   0 21 5 18 13 -6 16 -13 17 -13 2z"/>
   <path d="M930 940 c-8 -5 -11 -10 -6 -10 5 0 4 -6 -2 -13 -6 -7 -7 -18 -3 -26
   5 -7 6 -22 3 -33 -3 -11 0 -23 5 -27 32 -19 123 -105 123 -115 0 -6 -9 0 -20
   14 -11 14 -20 19 -20 12 0 -7 -5 -10 -11 -6 -8 5 -8 9 1 14 8 5 8 9 -3 13 -16
   6 -17 -9 -4 -30 5 -7 5 -19 2 -25 -4 -7 0 -5 8 4 8 10 17 15 20 11 4 -3 2 -12
   -4 -20 -9 -9 -8 -13 0 -13 6 0 11 4 11 9 0 14 38 7 59 -11 11 -9 23 -13 28
   -10 4 4 5 3 1 -1 -6 -8 26 -47 37 -47 14 1 33 -29 31 -50 0 -13 5 -25 12 -27
   6 -3 12 0 12 7 0 6 -4 9 -8 6 -5 -3 -9 1 -9 9 0 17 52 -17 70 -46 7 -11 17
   -19 24 -19 6 0 15 -9 18 -20 4 -11 10 -18 15 -15 5 3 11 1 14 -4 4 -5 1 -13
   -5 -17 -8 -5 -9 -3 -4 6 5 9 4 11 -4 6 -6 -4 -14 -1 -17 8 -3 8 -13 12 -22 9
   -15 -4 -15 -3 -2 7 13 10 13 11 -2 6 -16 -5 -23 4 -19 26 0 4 -6 5 -15 1 -9
   -3 -20 0 -25 8 -7 11 -9 11 -9 1 0 -8 9 -16 20 -19 10 -3 22 -14 25 -24 4 -10
   15 -19 26 -19 11 0 17 -5 14 -10 -4 -6 -1 -9 7 -8 7 2 12 -3 10 -10 -1 -8 1
   -11 6 -8 9 5 36 -21 40 -39 1 -5 10 -10 21 -11 10 -1 35 -11 55 -23 20 -13 36
   -20 36 -18 0 3 -17 16 -37 28 -21 13 -42 29 -46 36 -5 7 -13 10 -19 7 -7 -5
   -8 -2 -3 6 6 9 4 11 -5 5 -9 -6 -11 -4 -5 5 5 8 4 11 -3 6 -6 -3 -13 -2 -17 4
   -12 19 21 10 45 -12 14 -13 29 -21 35 -20 5 2 7 0 3 -4 -11 -10 62 -59 89 -59
   21 -1 22 0 5 19 -12 13 -13 20 -5 23 17 6 -5 63 -24 63 -8 0 -11 5 -8 10 3 6
   1 10 -6 10 -6 0 -19 8 -28 18 -9 10 -29 27 -44 37 -15 10 -26 24 -23 31 3 8 0
   11 -10 7 -9 -3 -14 1 -14 13 0 15 -2 16 -9 5 -7 -11 -10 -9 -16 8 -4 13 -9 20
   -11 18 -7 -7 -79 64 -77 74 2 5 -3 8 -10 6 -6 -1 -11 4 -9 11 1 8 -2 11 -6 8
   -14 -9 -55 31 -46 45 4 8 3 9 -5 5 -15 -10 -43 13 -34 27 3 5 1 7 -4 4 -6 -4
   -36 17 -67 46 -31 30 -58 52 -61 49 -5 -5 -8 12 -6 38 0 10 -1 11 -5 3 -4 -10
   -11 -10 -25 -2 -11 5 -17 14 -14 20 8 11 4 11 -15 -1z m450 -540 c0 -5 -5 -10
   -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z"/>
   <path d="M901 844 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z"/>
   <path d="M915 810 c-4 -6 1 -7 11 -3 11 4 15 3 10 -5 -3 -6 3 -13 14 -17 17
   -5 18 -10 9 -28 -10 -21 -9 -21 5 -3 14 17 13 21 -7 42 -24 26 -33 29 -42 14z"/>
   <path d="M1054 689 c-7 -12 6 -23 22 -19 3 1 14 -9 25 -21 10 -12 22 -19 26
   -16 3 4 4 8 2 10 -2 1 -18 15 -35 30 -24 21 -34 25 -40 16z"/>
   <path d="M1117 603 c5 -12 7 -12 14 -2 6 10 11 10 23 0 11 -9 16 -10 16 -2 0
   11 -1 12 -37 16 -15 2 -20 -2 -16 -12z"/>
   <path d="M1226 545 c4 -8 11 -15 16 -15 6 0 5 6 -2 15 -7 8 -14 15 -16 15 -2
   0 -1 -7 2 -15z"/>
   <path d="M606 378 c3 -5 10 -6 15 -3 13 9 11 12 -6 12 -8 0 -12 -4 -9 -9z"/>
   <path d="M1530 381 c0 -6 4 -13 10 -16 6 -3 7 1 4 9 -7 18 -14 21 -14 7z"/>
   <path d="M1470 307 c-12 -21 -12 -21 6 -7 10 8 20 15 22 16 2 1 -1 4 -5 7 -5
   3 -15 -4 -23 -16z"/>
   <path d="M1235 209 c-4 -6 -5 -12 -2 -15 2 -3 7 2 10 11 7 17 1 20 -8 4z"/>
   <path d="M875 160 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
   -8 -4 -11 -10z"/>
   <path d="M1589 213 c-12 -16 -12 -17 2 -6 9 7 20 9 24 5 5 -4 5 -1 1 6 -9 16
   -11 15 -27 -5z"/>
   <path d="M6 878 c3 -5 10 -6 15 -3 13 9 11 12 -6 12 -8 0 -12 -4 -9 -9z"/>
   <path d="M1960 760 c-9 -6 -10 -10 -3 -10 6 0 15 5 18 10 8 12 4 12 -15 0z"/>
   <path d="M1933 641 c0 -11 5 -18 9 -15 4 3 5 11 1 19 -7 21 -12 19 -10 -4z"/>
   <path d="M1886 564 c-19 -19 -21 -31 -3 -15 8 6 16 9 19 6 2 -3 5 2 5 10 0 19
   -2 19 -21 -1z"/>
   <path d="M1856 514 c-8 -20 -8 -24 2 -24 4 0 8 9 9 20 2 24 -3 26 -11 4z"/>
   <path d="M134 498 c-4 -7 -4 -10 1 -6 4 4 14 0 22 -10 13 -15 13 -15 3 6 -12
   25 -16 27 -26 10z"/>
   <path d="M1826 464 c-17 -16 -13 -34 7 -34 8 0 8 3 -2 9 -9 6 -10 11 -2 15 6
   4 15 4 21 1 6 -3 7 1 4 9 -8 20 -9 20 -28 0z"/>
   <path d="M1795 419 c-5 -8 -4 -10 3 -5 8 5 12 -1 13 -16 1 -18 2 -19 6 -4 6
   23 -12 43 -22 25z"/>
   <path d="M170 399 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
   -5 -10 -11z"/>
   <path d="M205 390 c-19 -8 -19 -9 -1 -9 16 -1 17 -3 5 -18 -11 -15 -11 -16 0
   -6 16 13 41 7 37 -10 -1 -7 -1 -9 1 -4 3 4 10 5 16 1 7 -3 1 4 -13 17 -14 12
   -24 26 -22 30 2 10 3 10 -23 -1z"/>
   <path d="M1746 355 c-9 -26 -7 -32 5 -12 6 10 9 21 6 23 -2 3 -7 -2 -11 -11z"/>
   <path d="M1715 330 c-4 -6 -3 -16 3 -22 13 -13 23 4 13 21 -7 10 -10 10 -16 1z"/>
   <path d="M310 251 c0 -15 18 -23 25 -12 3 6 13 7 23 4 9 -3 14 -3 11 1 -11 11
   -59 17 -59 7z"/>
   <path d="M1655 220 c-3 -6 1 -7 9 -4 18 7 21 14 7 14 -6 0 -13 -4 -16 -10z"/>
   <path d="M463 149 c-2 -17 13 -24 40 -20 4 0 7 -4 7 -9 0 -5 5 -10 11 -10 8 0
   9 4 0 13 -6 8 -7 17 -3 21 4 4 3 6 -3 5 -5 -2 -19 2 -30 8 -18 10 -21 9 -22
   -8z m32 -9 c3 -6 -1 -7 -9 -4 -18 7 -21 14 -7 14 6 0 13 -4 16 -10z"/>
   <path d="M587 83 c-3 -5 3 -15 15 -22 15 -9 18 -9 13 0 -5 7 -3 10 6 7 8 -3
   13 -10 12 -15 -1 -6 12 -9 29 -7 25 3 28 1 19 -10 -9 -11 -9 -16 0 -22 7 -4 9
   -3 5 4 -3 5 -2 12 3 14 5 1 11 9 13 17 2 10 -7 15 -28 16 -17 0 -39 7 -48 14
   -13 11 -16 11 -16 0 0 -12 -2 -12 -9 0 -5 7 -11 9 -14 4z"/>
   <animate id="one" attributeType="XML" attributeName="fill" from="black" to="#b200fc"
    dur="3s" begin="0;two.end"/>
    <animate id="two "attributeType="XML" attributeName="fill" from="#b200fc" to="black"
    begin="one.end" dur="3s"/>
   </g>
   
   </svg>
      <h1>401 - Unauthorized ! </h1>
      <h1 style="margin: 0; font-size: 5rem;">😠</h1>
      <p>Please contact Kovinda </p>
        
         <a  class="btn-grad" href="https://t.me/kovinda_thisal">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" style="vertical-align: bottom;" fill="white" class="bi bi-telegram" viewBox="0 0 16 16">
               <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.287 5.906c-.778.324-2.334.994-4.666 2.01-.378.15-.577.298-.595.442-.03.243.275.339.69.47l.175.055c.408.133.958.288 1.243.294.26.006.549-.1.868-.32 2.179-1.471 3.304-2.214 3.374-2.23.05-.012.12-.026.166.016.047.041.042.12.037.141-.03.129-1.227 1.241-1.846 1.817-.193.18-.33.307-.358.336a8.154 8.154 0 0 1-.188.186c-.38.366-.664.64.015 1.088.327.216.589.393.85.571.284.194.568.387.936.629.093.06.183.125.27.187.331.236.63.448.997.414.214-.02.435-.22.547-.82.265-1.417.786-4.486.906-5.751a1.426 1.426 0 0 0-.013-.315.337.337 0 0 0-.114-.217.526.526 0 0 0-.31-.093c-.3.005-.763.166-2.984 1.09z"/>
             </svg>
            Kovinda</a>
   </div>



   <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
   <script>
      particlesJS("particles-js", { "particles": { "number": { "value": 58, "density": { "enable": true, "value_area": 800 } }, "color": { "value": "#b200fc" }, "shape": { "type": "circle", "stroke": { "width": 0, "color": "#ffffff" }, "polygon": { "nb_sides": 5 }, "image": { "src": "img/github.svg", "width": 100, "height": 100 } }, "opacity": { "value": 0.5, "random": false, "anim": { "enable": false, "speed": 1, "opacity_min": 0.1, "sync": false } }, "size": { "value": 3, "random": true, "anim": { "enable": false, "speed": 40, "size_min": 0.1, "sync": false } }, "line_linked": { "enable": true, "distance": 160.24100246771155, "color": "#000000", "opacity": 0.5368073582668338, "width": 0.9614460148062693 }, "move": { "enable": true, "speed": 6, "direction": "none", "random": false, "straight": false, "out_mode": "out", "bounce": false, "attract": { "enable": false, "rotateX": 600, "rotateY": 1200 } } }, "interactivity": { "detect_on": "canvas", "events": { "onhover": { "enable": true, "mode": "grab" }, "onclick": { "enable": true, "mode": "push" }, "resize": true }, "modes": { "grab": { "distance": 316.49421789409644, "line_linked": { "opacity": 0.3206261252743821 } }, "bubble": { "distance": 400, "size": 40, "duration": 2, "opacity": 8, "speed": 3 }, "repulse": { "distance": 89.2675999188477, "duration": 0.4 }, "push": { "particles_nb": 4 }, "remove": { "particles_nb": 2 } } }, "retina_detect": true }); 

   </script>



</body>

</html>`

const not_found = `<html>
<head>
   <title>404 - File Not Found</title>
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="apple-touch-icon" sizes="180x180"
      href="https://cdn.jsdelivr.net/gh/Kovinda/res@master/img/K/apple-touch-icon.png">
   <link rel="icon" type="image/png" sizes="32x32"
      href="https://cdn.jsdelivr.net/gh/Kovinda/res@master/img/K/favicon-32x32.png">
   <link rel="icon" type="image/png" sizes="16x16"
      href="https://cdn.jsdelivr.net/gh/Kovinda/res@master/img/K/favicon-16x16.png">
   <link href="https://fonts.googleapis.com/css?family=Quicksand:300,400&display=swap" rel="stylesheet">
   <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
   <style>
      canvas {
         display: block;
         vertical-align: bottom;
      }

      #particles-js {
         position: absolute;
         width: 100%;
         height: 100%;
      }


      body {
         margin: 0;
         padding: 0;
         width: 100%;
         height: 100%;
         background-color: #ffffff;
         display: table;
         font-weight: 100;
         font-family: 'Quicksand', sans-serif;
      }


      .text {
         text-align: center;
         position: absolute;
         display: inline-block;
         top: 50%;
         right: 50%;
         transform: translate(50%, -50%);
         color: rgb(0, 0, 0);
         max-width: 90%;
         padding: 2em 3em;
         text-shadow: 0px 0px 10px #e97bff;
         font-family: "Open Sans", sans-serif;
      }
      h1 {
         font-size: 2.25em;
         font-weight: 700;
         letter-spacing: -1px;
      }

      .btn-grad {background-image: linear-gradient(to right, #b200fc 0%, #ff00bf  51%, #b200fc  100%)}
         .btn-grad {
            margin: 10px;
            padding: 0.5em 1em;
            text-align: center;
            /* text-transform: uppercase; */
            transition: 0.5s;
            background-size: 200% auto;
            color: rgb(0, 0, 0);            
            box-shadow: 0 0 20px rgb(255, 78, 211);
            border-radius: 10px;
            text-decoration: none;
            /* display: block; */
          }

          .btn-grad:hover {
            background-position: right center; /* change the direction of the change here */
            color: #fff;
            text-decoration: none;
          }
          


         
   </style>
</head>

<body>
   <div id="particles-js"></div>
   

   <div class="text" >
       
    <svg class="img" version="1.0" xmlns="http://www.w3.org/2000/svg"
    width="200.000000pt" height="200.000000pt" viewBox="0 0 200.000000 200.000000"
    preserveAspectRatio="xMidYMid meet">
   <g transform="translate(0.000000,200.000000) scale(0.100000,-0.100000)"
   fill="#000000" stroke="none">
   <path d="M830 1986 c0 -2 7 -7 16 -10 8 -3 12 -2 9 4 -6 10 -25 14 -25 6z"/>
   <path d="M1235 1980 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
   -8 -4 -11 -10z"/>
   <path d="M894 1969 c-2 -4 -22 -6 -44 -5 -22 0 -40 -3 -40 -8 0 -4 -11 -6 -25
   -4 -15 3 -22 1 -18 -5 4 -6 0 -8 -9 -4 -9 3 -20 1 -25 -4 -5 -5 -23 -11 -40
   -12 -17 -1 -29 -5 -26 -9 2 -5 -4 -8 -14 -8 -10 0 -27 -7 -37 -15 -17 -13 -21
   -12 -32 3 -12 15 -12 15 -7 -6 4 -18 2 -21 -12 -15 -13 4 -16 3 -11 -5 4 -7 2
   -12 -3 -12 -6 0 -33 -14 -61 -31 -27 -17 -54 -28 -60 -24 -6 4 -7 -1 -3 -12 3
   -10 3 -15 -1 -12 -4 4 -18 -4 -32 -18 -13 -13 -29 -21 -36 -17 -6 4 -8 3 -5
   -3 8 -13 -27 -46 -38 -36 -4 5 -5 3 -2 -4 4 -6 -3 -20 -15 -30 -13 -10 -36
   -36 -53 -58 -16 -22 -35 -46 -41 -53 -7 -6 -16 -21 -19 -32 -4 -11 -11 -18
   -16 -14 -5 3 -9 2 -8 -3 4 -21 -2 -34 -13 -27 -7 4 -8 3 -4 -4 7 -12 -31 -94
   -47 -100 -4 -2 -4 -8 -1 -13 3 -6 0 -17 -7 -25 -7 -9 -14 -23 -15 -32 -1 -10
   -9 -47 -18 -83 -19 -80 -25 -122 -27 -205 -1 -43 -5 -61 -13 -57 -6 4 -5 0 1
   -9 7 -8 15 -42 17 -74 2 -32 9 -70 14 -84 7 -20 6 -26 -7 -32 -14 -6 -14 -7 1
   -7 11 -1 15 -6 12 -16 -4 -8 -1 -15 6 -15 9 0 9 -4 -1 -17 -8 -9 -9 -14 -3
   -10 6 3 16 -5 22 -18 10 -21 9 -25 -4 -25 -8 0 -13 4 -9 9 3 5 1 12 -4 15 -5
   4 -8 -2 -7 -11 2 -10 13 -19 24 -21 12 -2 22 -8 22 -13 0 -6 -4 -8 -9 -4 -5 3
   -13 0 -17 -6 -4 -7 -3 -9 4 -5 6 3 18 -4 26 -16 14 -20 14 -24 -2 -42 -16 -19
   -16 -20 0 -7 24 18 41 6 28 -20 -6 -11 -15 -17 -20 -14 -5 3 -11 2 -14 -3 -8
   -13 27 -11 39 2 6 6 9 9 8 7 -1 -2 7 -15 17 -29 15 -18 17 -28 10 -37 -14 -17
   16 -49 38 -40 12 4 12 3 3 -9 -9 -11 -9 -14 3 -12 8 0 16 -3 17 -9 2 -5 13
   -18 26 -29 22 -17 23 -20 9 -35 -9 -10 -16 -21 -16 -26 0 -5 6 0 14 10 13 18
   15 18 40 2 15 -10 24 -22 21 -28 -4 -5 -11 -7 -16 -3 -5 3 -7 10 -4 15 4 5 2
   9 -4 9 -5 0 -11 -3 -14 -7 -2 -5 -2 -1 0 7 3 12 2 12 -8 3 -16 -16 4 -42 29
   -38 18 3 68 -20 89 -40 10 -11 10 -14 -3 -19 -10 -4 -13 -2 -8 6 5 7 3 8 -6 3
   -8 -5 -11 -4 -7 3 5 6 0 8 -13 5 -25 -7 -27 -21 -2 -19 11 0 16 -6 16 -17 -2
   -17 0 -17 23 -2 19 13 27 14 39 4 17 -14 18 -29 3 -29 -5 0 -7 5 -3 12 5 7 3
   8 -6 3 -9 -6 -11 -4 -5 6 7 12 6 12 -6 1 -12 -11 -11 -15 4 -23 9 -6 15 -14
   12 -20 -4 -5 -2 -9 3 -9 6 0 13 11 16 25 l6 25 22 -19 c11 -11 25 -18 30 -15
   4 3 12 -3 16 -13 7 -17 22 -25 49 -26 19 -1 5 -11 -17 -12 -11 -1 -16 3 -13 9
   4 6 -2 4 -13 -4 -10 -8 -21 -16 -24 -18 -2 -2 11 0 29 3 29 5 32 4 22 -9 -9
   -11 -9 -16 0 -22 7 -4 9 -3 5 4 -3 6 3 16 14 22 11 6 20 7 20 3 0 -4 5 -1 10
   7 7 11 10 11 10 2 0 -7 5 -10 12 -6 6 4 8 3 4 -4 -3 -6 -2 -13 4 -17 5 -3 10
   -1 10 6 0 8 4 8 15 -1 9 -7 18 -10 22 -6 3 3 15 -2 26 -11 10 -10 21 -17 23
   -15 10 6 34 1 34 -8 0 -12 -22 -9 -32 5 -5 6 -8 4 -8 -5 0 -13 -1 -13 -10 0
   -7 12 -9 10 -7 -7 0 -12 3 -20 6 -18 2 3 10 0 18 -7 7 -6 16 -8 20 -4 3 3 1 6
   -6 6 -7 0 -9 5 -6 11 5 7 13 5 25 -6 15 -14 18 -14 30 0 8 9 20 13 33 9 13 -4
   17 -2 13 5 -5 7 -1 9 8 5 25 -10 19 -23 -9 -19 -14 1 -27 -1 -30 -4 -2 -4 39
   -7 91 -6 68 0 90 3 80 10 -11 8 -5 11 25 11 22 0 34 -3 27 -7 -7 -4 -16 -5
   -20 -3 -4 3 -8 1 -8 -3 0 -12 221 -10 240 2 15 9 36 14 76 17 21 2 21 3 5 27
   -9 14 -11 22 -4 18 6 -4 14 -1 17 5 3 7 4 4 3 -7 -1 -12 3 -19 12 -17 9 2 11
   -3 7 -15 -6 -17 -5 -17 7 -1 8 10 18 14 22 10 5 -4 5 -2 2 4 -4 7 1 18 10 25
   15 12 16 12 10 -3 -3 -10 -2 -20 4 -23 5 -4 9 -3 8 2 -1 4 -1 16 0 27 1 16 3
   16 17 6 12 -11 15 -11 12 1 -2 9 5 14 18 13 14 0 20 4 17 13 -4 9 -10 10 -23
   3 -9 -5 -21 -6 -25 -2 -5 4 -5 0 0 -8 5 -8 4 -12 0 -7 -5 4 -19 0 -32 -8 -14
   -9 -23 -11 -23 -5 0 6 -5 8 -11 5 -6 -4 -8 -13 -6 -19 3 -7 -1 -13 -9 -13 -12
   0 -12 3 0 21 8 12 22 20 31 18 10 -2 14 1 10 7 -3 6 0 9 8 5 8 -3 19 2 26 10
   7 8 20 12 28 9 11 -4 14 -2 9 6 -4 6 -4 11 1 10 21 -4 34 2 27 13 -4 7 -3 8 5
   4 8 -5 9 -12 2 -20 -7 -8 -6 -17 1 -26 8 -12 9 -12 4 2 -6 20 10 34 17 16 4
   -10 6 -10 6 0 1 7 5 10 11 7 6 -3 7 1 4 9 -6 15 12 22 41 16 5 -1 7 2 3 6 -5
   4 2 12 15 19 12 6 21 16 20 22 -1 6 12 18 30 27 18 8 26 16 19 16 -7 0 -10 4
   -7 10 4 6 -1 7 -11 3 -12 -4 -15 -3 -10 5 4 7 19 12 34 12 22 0 24 -2 12 -11
   -12 -9 -12 -10 3 -5 10 3 22 6 25 6 4 1 -4 7 -17 14 l-24 13 36 38 c30 32 37
   36 43 22 3 -9 10 -17 15 -17 5 0 1 12 -8 27 -10 15 -12 24 -5 20 7 -5 12 -3
   12 3 0 7 14 32 30 57 17 24 40 63 52 86 21 40 23 46 27 65 1 4 6 0 12 -8 8
   -11 9 -8 4 13 -4 21 -3 27 6 21 9 -5 10 -2 5 11 -4 10 -2 21 5 25 6 4 13 26
   14 50 2 25 11 48 22 57 10 8 12 12 6 8 -7 -3 -13 -1 -13 4 0 6 6 11 13 11 8 0
   7 4 -3 10 -8 5 -10 10 -5 10 6 0 11 10 11 23 1 123 5 158 17 151 9 -6 9 -4 1
   7 -6 8 -12 30 -13 49 -2 34 -4 53 -16 135 -3 21 -20 80 -37 130 -16 49 -31 95
   -31 102 0 7 -4 10 -8 8 -10 -7 -20 25 -12 37 3 7 1 8 -5 4 -7 -4 -12 -3 -12 3
   0 5 -15 31 -32 57 -18 25 -37 53 -43 62 -5 9 -16 22 -24 28 -8 6 -11 16 -7 23
   5 7 2 10 -6 9 -7 -2 -12 3 -10 10 1 8 -2 11 -6 8 -12 -7 -44 28 -35 38 5 4 1
   6 -7 4 -8 -2 -14 3 -12 10 1 8 -2 11 -8 7 -5 -3 -13 1 -16 9 -3 9 -10 14 -14
   11 -5 -3 -12 1 -17 8 -4 8 -18 19 -30 26 -13 6 -23 19 -23 29 0 10 -3 13 -8 6
   -5 -7 -18 -3 -39 12 -18 12 -29 25 -25 28 3 4 -1 4 -11 0 -11 -4 -19 0 -23 9
   -3 9 -12 13 -20 10 -7 -3 -16 2 -20 10 -3 9 -12 13 -19 11 -7 -3 -16 -1 -20 5
   -3 6 -15 11 -26 11 -11 0 -18 4 -15 9 4 5 -4 7 -16 3 -13 -3 -19 -1 -15 5 5 7
   0 9 -12 6 -10 -3 -22 0 -25 6 -4 5 -14 7 -23 4 -10 -4 -14 -2 -10 4 5 7 0 9
   -13 6 -13 -4 -27 1 -36 13 -9 11 -13 13 -9 6 5 -9 -4 -11 -37 -7 -65 9 -239
   11 -244 4z m86 -108 c0 12 2 12 9 1 4 -8 12 -14 16 -14 4 0 12 6 16 14 5 7 9
   8 9 2 0 -6 16 -11 37 -10 24 1 38 -4 40 -14 4 -13 3 -13 -6 0 -7 9 -11 10 -11
   3 0 -6 -9 -11 -20 -10 -11 1 -20 5 -20 10 0 5 -8 3 -17 -4 -9 -8 -14 -9 -10
   -3 4 7 -3 10 -18 10 -34 -2 -36 -8 -16 -35 13 -17 18 -19 18 -7 0 9 -4 16 -9
   16 -5 0 -6 5 -2 12 5 8 14 4 27 -13 13 -16 18 -18 14 -6 -4 9 -2 17 2 17 5 0
   11 -5 13 -11 3 -9 9 -9 25 0 14 7 24 8 28 1 3 -5 1 -10 -5 -10 -6 0 -8 -5 -4
   -11 4 -8 9 -7 15 2 5 8 9 10 9 5 0 -5 7 -3 15 4 8 7 13 16 10 20 -3 5 0 12 6
   16 8 4 9 3 5 -4 -4 -7 -2 -12 3 -12 6 0 11 6 12 13 0 9 2 9 6 -1 2 -6 10 -9
   15 -6 7 4 8 2 4 -4 -5 -9 3 -11 28 -7 27 5 37 2 44 -12 5 -10 7 -24 5 -30 -6
   -16 -3 -16 40 2 l34 14 -2 -28 c-2 -26 0 -29 23 -25 23 5 24 3 11 -13 -13 -16
   -12 -17 3 -4 20 15 14 35 -9 27 -9 -4 -11 -2 -7 6 5 7 3 8 -6 3 -9 -5 -11 -4
   -6 3 5 9 13 9 29 0 12 -7 24 -13 27 -13 3 0 19 -9 37 -18 36 -19 58 -51 47
   -69 -4 -7 -3 -8 4 -4 7 4 12 2 12 -4 0 -6 5 -8 10 -5 6 4 4 12 -5 21 -32 32
   -13 24 38 -16 28 -23 52 -46 52 -52 0 -5 11 -15 24 -22 20 -11 21 -14 7 -19
   -11 -5 -15 -3 -10 5 4 7 3 8 -4 4 -18 -11 -14 -22 13 -34 16 -7 23 -17 19 -27
   -3 -8 -2 -15 4 -15 16 0 7 31 -13 46 -10 8 -14 14 -8 14 16 0 62 -52 106 -120
   17 -27 17 -29 0 -45 -16 -17 -16 -17 4 -11 18 6 25 1 38 -24 13 -25 14 -34 4
   -46 -9 -12 -9 -13 3 -9 9 4 19 -4 27 -21 10 -22 9 -28 -6 -40 -17 -13 -17 -14
   1 -7 16 5 18 3 13 -11 -4 -10 -3 -15 3 -11 6 3 11 -1 11 -9 1 -9 2 -22 3 -28
   1 -7 -2 -19 -7 -26 -7 -9 -5 -11 9 -5 17 6 18 5 4 -12 -8 -10 -10 -16 -3 -12
   7 5 12 1 12 -10 0 -10 2 -44 4 -76 3 -33 2 -55 -4 -52 -5 4 -9 1 -9 -4 0 -6 4
   -11 9 -11 6 0 8 -10 5 -22 -3 -13 -5 -38 -5 -57 0 -18 -3 -39 -6 -45 -4 -6 -8
   -15 -8 -21 -2 -31 -18 -95 -24 -95 -4 0 -8 -10 -8 -22 -1 -13 -7 -24 -12 -26
   -5 -2 -7 -10 -4 -18 3 -8 0 -14 -7 -14 -6 0 -9 -4 -5 -10 3 -5 -3 -18 -13 -28
   -10 -10 -16 -24 -14 -30 2 -7 -1 -12 -7 -12 -6 0 -11 -4 -11 -9 0 -14 -52 -91
   -62 -91 -4 0 -8 -5 -8 -11 0 -15 -107 -119 -114 -112 -3 4 -6 2 -6 -4 0 -10
   -53 -52 -124 -97 -19 -12 -26 -13 -21 -5 4 8 1 7 -7 -1 -13 -16 -101 -57 -135
   -63 -10 -2 -25 -7 -33 -10 -8 -4 -37 -11 -65 -16 -40 -8 -53 -6 -67 5 -12 12
   -18 12 -24 3 -4 -7 -3 -10 4 -5 6 3 13 2 16 -3 9 -14 -31 -20 -45 -7 -7 6 -9
   7 -6 0 4 -6 -10 -10 -38 -10 -26 1 -41 5 -37 11 3 5 -1 4 -10 -3 -9 -7 -19 -9
   -22 -4 -3 5 -24 8 -47 6 -29 -2 -39 1 -36 10 3 7 -1 13 -9 13 -7 0 -10 -5 -7
   -10 4 -6 -3 -7 -18 -3 -33 10 -39 11 -79 20 -19 5 -40 12 -46 18 -7 5 -23 11
   -35 13 -13 3 -25 9 -27 15 -2 5 -11 10 -20 10 -20 0 -82 42 -82 55 0 6 14 23
   30 38 22 21 30 38 30 63 0 21 4 33 10 29 6 -3 10 -2 10 4 0 5 -6 11 -12 14
   -10 3 -9 8 2 22 9 12 10 16 2 11 -9 -6 -11 -1 -8 18 3 14 7 30 11 36 3 5 2 10
   -2 10 -5 0 -7 16 -5 35 3 22 8 33 16 28 6 -3 8 -3 4 2 -4 4 -2 15 5 24 11 14
   10 14 -6 2 -17 -14 -18 -13 -15 5 1 10 10 25 18 32 8 7 11 12 5 11 -25 -3 -27
   2 -9 23 10 12 13 18 6 14 -10 -6 -12 4 -9 42 2 27 7 54 11 60 4 7 2 12 -4 12
   -6 0 -8 5 -4 12 4 6 9 41 12 77 2 36 9 69 16 73 8 5 7 8 -3 8 -11 0 -11 3 0
   17 8 9 9 14 3 10 -12 -7 -11 1 1 78 3 22 7 66 8 97 1 32 6 58 11 58 4 0 6 9 3
   20 -3 11 0 20 6 20 8 0 8 3 0 11 -12 12 -6 42 6 35 4 -3 8 5 8 17 2 17 0 19
   -7 7 -8 -13 -10 -12 -10 3 0 9 3 17 8 17 4 0 8 17 9 37 3 74 8 103 18 103 5 0
   3 5 -5 10 -8 5 -10 10 -5 10 6 0 12 14 13 32 2 18 7 35 13 39 8 4 8 9 -1 14
   -8 5 -6 13 7 28 10 11 13 18 8 14 -6 -3 -11 3 -11 14 0 10 5 19 10 19 5 0 6 3
   3 6 -12 12 -87 -48 -87 -68 0 -11 -5 -28 -10 -39 -8 -14 -7 -19 2 -19 8 0 9
   -3 3 -8 -6 -4 -11 -18 -12 -32 -1 -14 -5 -45 -9 -70 -4 -25 -7 -57 -7 -72 1
   -16 -3 -28 -7 -28 -4 0 -6 -13 -4 -30 2 -16 0 -31 -4 -34 -5 -3 -7 -21 -6 -41
   2 -24 0 -33 -8 -29 -7 5 -8 2 -2 -7 7 -12 7 -43 -2 -104 -1 -11 -3 -20 -4 -20
   -2 0 -4 -32 -11 -137 -1 -21 -7 -38 -13 -38 -6 0 -6 -4 1 -11 8 -8 8 -20 3
   -34 -5 -13 -6 -26 -2 -30 3 -3 0 -10 -8 -15 -11 -7 -11 -10 -2 -10 8 0 10 -8
   6 -24 -5 -23 -14 -128 -14 -174 0 -14 -4 -20 -11 -16 -8 5 -8 1 0 -13 6 -11 8
   -23 6 -25 -3 -3 -6 -30 -7 -61 -1 -32 -7 -57 -13 -57 -5 0 -3 -5 5 -10 8 -5
   10 -10 5 -10 -6 0 -11 -24 -10 -55 0 -50 -5 -60 -28 -56 -5 1 -6 -3 -2 -9 3
   -6 10 -8 15 -5 4 3 10 -4 13 -15 5 -20 5 -20 -24 1 -16 11 -27 25 -23 30 3 5
   1 8 -4 7 -27 -8 -202 184 -202 220 0 7 -4 12 -9 12 -10 0 -21 27 -20 44 0 5
   -4 12 -9 15 -6 3 -12 15 -14 26 -1 11 -7 23 -11 26 -5 4 -10 18 -10 32 -1 14
   -5 23 -8 21 -7 -4 -27 82 -35 151 -11 103 -11 120 0 134 8 11 8 13 0 8 -12 -7
   -11 34 3 103 3 19 6 39 4 43 -1 5 7 16 17 25 10 9 12 13 5 8 -10 -6 -12 -4
   -10 10 6 40 61 171 85 202 13 17 20 32 16 32 -5 0 -1 7 9 14 10 8 18 17 17 20
   -1 14 44 65 53 59 6 -4 8 0 4 10 -3 9 -3 16 1 14 4 -1 7 0 7 3 0 3 20 23 45
   45 25 22 55 51 67 65 13 14 23 21 23 16 0 -5 9 -1 20 9 11 10 20 14 20 10 0
   -5 6 -1 13 9 12 16 14 16 26 2 8 -9 18 -16 23 -16 5 0 2 7 -6 16 -9 8 -13 21
   -9 27 5 8 9 7 11 -5 2 -12 12 -16 37 -15 18 1 31 5 28 10 -2 4 -8 5 -13 2 -5
   -3 -11 -1 -14 4 -3 5 1 12 10 15 9 3 12 11 8 18 -4 7 -4 10 1 6 4 -4 14 -3 21
   2 16 14 56 22 49 9 -4 -5 -11 -6 -17 -3 -7 4 -8 2 -4 -4 5 -8 1 -10 -11 -6
   -14 4 -15 4 -4 -4 7 -5 18 -16 23 -23 7 -11 8 -9 6 5 -2 10 3 21 11 24 10 3
   11 0 5 -9 -7 -12 -5 -12 9 0 9 7 23 11 31 8 10 -4 13 -1 10 8 -6 16 -25 16
   -36 0 -4 -6 -8 -2 -8 8 0 9 5 18 10 18 11 2 25 5 38 9 4 1 11 2 16 1 4 -1 14
   4 22 10 11 9 14 8 14 -1 0 -9 6 -8 19 4 19 17 20 17 31 -4 8 -15 8 -20 1 -16
   -6 4 -11 2 -11 -4 0 -7 6 -10 13 -7 6 2 11 13 11 24 -1 16 4 20 23 18 13 -1
   26 2 29 7 3 5 12 4 20 -3 11 -9 14 -8 14 2z m150 -41 c0 -5 -2 -10 -4 -10 -3
   0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m162 -32 c-8 -8 -9 -4 -5 13
   4 13 8 18 11 10 2 -7 -1 -18 -6 -23z m-671 -21 c-6 -8 -8 -17 -4 -20 3 -4 1
   -7 -5 -7 -14 0 -14 2 -6 24 3 9 11 16 16 16 7 0 6 -5 -1 -13z m-426 -1318 c11
   -17 -1 -21 -15 -4 -8 9 -8 15 -2 15 6 0 14 -5 17 -11z m1460 -199 c-4 -6 -11
   -8 -16 -5 -8 6 -13 -8 -10 -27 0 -4 -16 -15 -37 -23 -20 -9 -42 -22 -48 -31
   -10 -13 -12 -13 -18 1 -3 9 -2 13 3 10 6 -3 14 3 20 12 6 10 11 14 11 9 0 -5
   9 3 21 18 11 14 24 24 29 21 4 -3 10 2 14 10 3 8 13 15 21 15 9 0 13 -5 10
   -10z m-334 -197 c15 -15 -8 -12 -36 5 -19 11 -19 12 3 9 12 -2 27 -8 33 -14z
   m-65 -9 c-1 -8 -5 -17 -9 -21 -11 -10 -117 -12 -123 -2 -5 9 -1 11 44 13 15 1
   33 5 41 10 10 6 12 5 7 -2 -5 -8 1 -12 15 -12 17 0 19 3 10 13 -8 10 -7 14 3
   14 8 0 13 -6 12 -13z m-462 -26 c-9 -14 -23 2 -17 18 4 12 8 13 14 3 4 -7 5
   -17 3 -21z m496 22 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6
   0 10 -4 10 -10z m-380 -18 c0 -5 -7 -9 -15 -9 -8 0 -12 4 -9 9 7 10 24 10 24
   0z m40 4 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25 14 25 6z m160 -5 c0
   -4 -11 -7 -24 -7 -14 0 -23 3 -21 6 5 9 45 10 45 1z"/>
   <path d="M944 1845 c-5 -12 -9 -13 -14 -5 -4 7 -13 9 -19 6 -6 -4 -9 -12 -5
   -17 3 -5 2 -16 -3 -22 -4 -7 0 -5 9 5 19 21 26 22 48 5 13 -10 13 -10 2 5 -10
   13 -10 17 0 20 9 3 9 6 0 12 -7 4 -15 1 -18 -9z"/>
   <path d="M852 1837 c-7 -8 -26 -13 -42 -12 -37 2 -46 -8 -23 -26 12 -10 14
   -10 9 -1 -4 7 -1 12 9 12 9 0 14 -4 11 -8 -3 -5 1 -9 9 -9 11 0 12 4 4 14 -16
   19 -3 16 17 -4 17 -17 18 -17 11 1 -5 12 -3 22 5 27 7 4 10 11 7 14 -4 3 -11
   -1 -17 -8z"/>
   <path d="M1170 1812 c0 -14 7 -20 23 -21 44 -1 57 -4 57 -15 0 -6 4 -4 10 4
   13 21 -8 41 -38 35 -14 -2 -32 1 -39 7 -10 8 -13 6 -13 -10z m84 -10 c3 -5 -1
   -9 -9 -9 -8 0 -15 4 -15 9 0 4 4 8 9 8 6 0 12 -4 15 -8z"/>
   <path d="M656 1771 c-4 -5 -2 -12 3 -15 5 -4 12 -2 15 3 4 5 2 12 -3 15 -5 4
   -12 2 -15 -3z"/>
   <path d="M1304 1768 c-4 -6 -3 -8 4 -4 6 3 13 -2 15 -11 4 -14 5 -13 6 5 1 23
   -13 30 -25 10z"/>
   <path d="M1406 1734 c-9 -22 -7 -31 3 -16 12 20 56 -4 58 -31 2 -22 2 -22 -13
   -2 -12 15 -15 16 -12 4 4 -19 -64 -87 -81 -81 -6 2 -9 -3 -5 -12 6 -14 -5 -21
   -28 -17 -5 0 -7 -5 -5 -11 1 -7 -5 -11 -13 -10 -8 2 -12 0 -7 -4 9 -10 -22
   -44 -40 -44 -8 0 -12 -3 -10 -7 2 -5 -6 -18 -19 -31 -13 -12 -24 -19 -24 -15
   -1 4 -7 -3 -15 -17 -7 -14 -15 -23 -18 -20 -2 3 -17 -11 -33 -30 -16 -19 -33
   -37 -37 -38 -4 -2 -28 -24 -52 -48 -25 -24 -50 -44 -56 -44 -5 0 -7 -4 -4 -10
   3 -5 -1 -10 -9 -10 -9 0 -16 -7 -16 -15 0 -8 -3 -15 -7 -15 -5 0 -16 -13 -25
   -29 -15 -28 -15 -29 0 -23 15 5 15 4 3 -11 -9 -11 -10 -17 -2 -17 6 0 11 -5
   11 -11 0 -5 -4 -7 -10 -4 -5 3 -10 2 -10 -3 0 -14 28 -23 35 -12 4 6 11 10 17
   10 6 0 6 -7 -3 -17 -7 -10 1 -4 18 12 33 32 35 39 9 29 -9 -3 -13 -11 -9 -17
   4 -6 1 -7 -6 -3 -19 12 19 46 39 35 12 -5 16 -2 17 14 2 17 0 19 -7 7 -6 -10
   -10 -11 -10 -3 0 7 14 22 30 35 17 12 30 27 30 34 0 7 8 10 20 7 12 -3 20 0
   20 6 0 7 -5 9 -12 5 -7 -4 -8 -3 -4 4 4 7 14 12 22 12 10 0 12 -5 8 -12 -6
   -10 -5 -10 8 -1 8 7 19 9 23 5 5 -4 5 -1 1 6 -8 14 11 45 23 38 11 -7 36 12
   27 21 -5 4 -11 2 -13 -5 -3 -6 -8 -10 -13 -7 -5 3 -17 -6 -28 -20 -11 -13 -22
   -22 -25 -19 -7 7 38 54 52 54 7 0 10 4 6 9 -6 10 13 26 30 26 6 0 11 6 11 13
   3 26 5 26 24 2 15 -18 18 -20 13 -6 -5 14 -3 17 7 11 9 -5 11 -4 6 4 -4 6 -12
   9 -17 6 -5 -4 -9 -2 -9 3 0 6 7 13 16 16 8 3 12 10 9 16 -3 6 1 7 10 4 12 -5
   16 -2 13 12 -2 10 2 19 7 20 21 2 45 17 40 25 -3 4 5 13 17 20 13 7 29 20 36
   31 7 10 20 18 28 18 8 0 12 5 9 10 -3 6 -1 10 6 10 7 0 10 13 7 35 -4 39 -5
   39 25 24 21 -10 21 -10 2 6 -10 8 -19 27 -20 40 0 32 -60 73 -69 49z"/>
   <path d="M547 1715 c-4 -9 -11 -14 -16 -11 -5 3 -14 -1 -21 -9 -7 -8 -17 -12
   -24 -8 -6 3 -8 3 -4 -2 4 -4 -10 -21 -32 -37 -23 -17 -37 -35 -34 -42 3 -8 -1
   -13 -8 -13 -7 1 -14 -2 -15 -6 -1 -5 -9 -14 -19 -21 -13 -10 -14 -15 -4 -21 9
   -6 11 -4 5 5 -6 10 -4 12 7 7 21 -8 30 3 17 20 -9 10 -8 13 7 10 11 -1 26 -7
   34 -12 13 -8 13 -7 1 9 -12 14 -12 19 -2 26 11 6 11 9 0 13 -10 4 -9 6 4 6 9
   1 17 7 17 14 0 8 4 7 10 -3 9 -13 12 -13 23 1 6 9 19 14 27 11 9 -3 8 1 -4 10
   -13 10 -15 17 -8 22 7 4 12 2 12 -5 0 -6 9 -1 20 12 10 13 19 19 20 14 0 -6
   -4 -16 -10 -23 -5 -7 -3 -6 6 2 12 10 14 19 7 31 -9 16 -10 16 -16 0z m-53
   -60 c-4 -8 -11 -12 -16 -9 -6 4 -5 10 3 15 19 12 19 11 13 -6z"/>
   <path d="M875 1690 c-4 -6 -11 -7 -17 -4 -6 4 -8 2 -5 -3 6 -10 -19 -28 -35
   -25 -4 1 -5 -5 -2 -13 4 -10 0 -15 -12 -15 -16 0 -17 -2 -4 -10 12 -8 12 -10
   1 -10 -10 0 -11 -3 -2 -13 6 -8 8 -17 4 -21 -4 -4 -9 -19 -11 -34 -2 -15 -8
   -29 -13 -30 -6 -3 -5 -9 2 -18 9 -11 8 -14 -7 -14 -11 0 -15 -4 -9 -8 13 -9
   18 -42 7 -42 -5 0 -8 -10 -7 -22 1 -13 -3 -26 -9 -30 -7 -5 -7 -8 2 -8 7 0 10
   -4 7 -10 -7 -11 -17 -81 -18 -122 0 -16 -3 -28 -6 -28 -3 0 -7 -17 -7 -38 -1
   -35 -8 -110 -20 -232 -3 -30 -5 -64 -5 -75 0 -11 -5 -23 -12 -27 -7 -4 -7 -8
   -2 -8 8 0 13 -54 5 -62 -1 -2 -4 -37 -6 -77 -3 -41 -10 -82 -17 -90 -7 -9 -7
   -12 -1 -8 7 4 11 -7 10 -33 -1 -27 -5 -39 -13 -36 -7 3 -15 1 -18 -5 -4 -5 -1
   -8 7 -7 7 2 12 -3 11 -9 -2 -7 2 -13 8 -13 6 0 1 -9 -12 -20 -13 -11 -18 -19
   -10 -18 7 2 16 -3 18 -9 3 -8 -3 -13 -14 -14 -16 0 -16 -1 2 -9 11 -5 15 -9 9
   -9 -7 -1 -15 -8 -18 -17 -3 -8 -2 -13 3 -10 5 3 12 -1 15 -10 3 -8 2 -12 -3
   -9 -18 10 -21 -13 -4 -26 12 -10 14 -10 9 -1 -4 6 -2 12 3 12 6 0 11 -4 11
   -10 0 -5 5 -10 11 -10 8 0 7 5 -1 15 -7 9 -11 17 -9 18 2 1 14 11 27 21 25 22
   30 15 6 -9 -13 -13 -14 -19 -5 -28 10 -9 12 -9 9 3 -2 8 3 14 9 13 7 -2 12 0
   11 5 -1 4 1 23 5 42 6 27 10 32 17 20 6 -9 10 -10 10 -3 0 6 -5 15 -10 18 -8
   5 -8 11 -1 19 6 7 8 16 4 20 -12 12 -14 48 -2 40 8 -5 8 -1 0 13 -6 11 -8 22
   -6 25 2 2 7 40 10 84 3 43 7 104 9 134 2 30 4 70 5 88 1 24 5 31 14 26 9 -6 9
   -4 1 7 -13 15 -13 57 -1 76 4 6 3 14 -2 18 -6 3 -8 12 -5 20 4 8 11 12 17 8 6
   -4 7 -1 2 7 -11 17 -13 60 -3 60 3 0 5 12 2 27 -3 15 0 30 8 34 10 7 10 9 -1
   9 -10 0 -10 5 3 25 9 14 13 25 8 25 -15 0 -10 34 7 48 9 8 11 11 5 8 -7 -3
   -15 1 -18 10 -4 11 -2 15 7 11 8 -3 14 1 14 9 0 7 -3 11 -7 9 -4 -3 -5 10 -3
   28 3 17 6 47 7 65 1 18 8 37 16 42 12 8 13 10 1 10 -11 0 -9 5 5 22 15 19 16
   20 2 9 -11 -8 -18 -9 -18 -3 0 6 4 13 8 16 4 2 9 22 10 43 2 21 7 56 13 78 15
   60 17 85 8 85 -4 0 -11 -5 -14 -10z"/>
   <path d="M1526 1645 c-3 -8 -2 -14 2 -14 20 3 25 -2 12 -12 -13 -9 -13 -10 1
   -6 11 4 21 -4 29 -21 7 -16 14 -22 17 -14 3 6 10 9 16 5 7 -3 8 -2 4 3 -5 5
   -14 9 -19 9 -6 0 -13 6 -16 13 -2 8 2 10 15 5 10 -4 4 5 -13 20 -37 31 -40 32
   -48 12z m35 -12 c13 -16 12 -17 -3 -4 -10 7 -18 15 -18 17 0 8 8 3 21 -13z"/>
   <path d="M1426 1541 c-3 -5 1 -14 9 -21 10 -9 15 -9 15 -1 0 6 -5 11 -11 11
   -5 0 -7 5 -4 10 3 6 4 10 1 10 -3 0 -7 -4 -10 -9z"/>
   <path d="M337 1522 c4 -9 2 -13 -4 -9 -6 4 -19 -3 -29 -15 -11 -12 -14 -18 -7
   -15 6 4 13 1 16 -5 2 -7 8 -9 13 -5 5 4 2 12 -6 17 -14 9 -7 14 13 11 4 -1 10
   6 13 14 5 13 9 13 23 3 13 -10 14 -10 4 2 -18 20 -43 22 -36 2z"/>
   <path d="M1410 1511 c0 -6 -3 -10 -7 -10 -20 3 -30 -2 -30 -16 0 -15 26 -30
   35 -20 3 3 0 5 -6 5 -7 0 -12 7 -12 16 0 8 4 13 8 10 4 -2 14 -1 21 3 9 6 10
   11 2 15 -6 4 -11 2 -11 -3z"/>
   <path d="M1670 1489 c-13 -10 -13 -10 0 -6 19 6 45 -19 27 -26 -9 -4 -9 -6 0
   -6 21 -2 23 16 5 32 -13 12 -21 13 -32 6z"/>
   <path d="M283 1462 c-8 -5 -6 -14 8 -32 17 -21 19 -22 10 -3 -14 28 -14 36 1
   27 7 -4 8 -3 4 4 -8 14 -8 14 -23 4z"/>
   <path d="M1345 1459 c-4 -5 -11 -6 -17 -3 -7 5 -8 2 -4 -5 5 -7 0 -22 -11 -34
   -10 -12 -11 -16 -3 -10 8 6 20 13 25 14 6 2 9 10 7 17 -2 8 1 12 5 9 5 -3 15
   -2 22 2 10 6 9 10 -3 14 -8 3 -18 2 -21 -4z"/>
   <path d="M1724 1433 c2 -9 8 -18 15 -19 6 -1 7 0 1 3 -5 2 -8 9 -5 13 3 5 1
   11 -4 14 -5 4 -8 -2 -7 -11z"/>
   <path d="M251 1406 c-18 -20 -20 -24 -7 -29 9 -3 18 -1 22 5 4 7 3 8 -4 4 -17
   -11 -14 5 5 26 24 27 10 22 -16 -6z"/>
   <path d="M223 1352 c-7 -12 -8 -24 -2 -33 8 -11 9 -9 7 6 -2 11 2 19 9 18 7
   -2 10 4 7 12 -8 19 -7 19 -21 -3z"/>
   <path d="M1245 1360 c-4 -6 -10 -8 -15 -5 -5 3 -12 0 -16 -7 -4 -7 -4 -10 1
   -6 4 4 14 3 22 -4 11 -9 13 -8 11 3 -2 8 3 13 10 11 8 -1 11 2 7 8 -8 13 -12
   13 -20 0z"/>
   <path d="M1761 1351 c-8 -5 -9 -11 -3 -15 5 -3 12 1 16 9 6 17 6 18 -13 6z"/>
   <path d="M1797 1271 c-4 -17 -3 -21 5 -13 5 5 8 16 6 23 -3 8 -7 3 -11 -10z"/>
   <path d="M186 1263 c-6 -14 -5 -15 5 -6 7 7 10 15 7 18 -3 3 -9 -2 -12 -12z"/>
   <path d="M1100 1220 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0
   -4 -4 -4 -10z"/>
   <path d="M1130 1219 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
   -5 -10 -11z"/>
   <path d="M1080 1199 c0 -5 -4 -8 -9 -4 -5 3 -12 2 -15 -3 -2 -4 6 -8 19 -8 15
   0 21 5 18 13 -6 16 -13 17 -13 2z"/>
   <path d="M930 940 c-8 -5 -11 -10 -6 -10 5 0 4 -6 -2 -13 -6 -7 -7 -18 -3 -26
   5 -7 6 -22 3 -33 -3 -11 0 -23 5 -27 32 -19 123 -105 123 -115 0 -6 -9 0 -20
   14 -11 14 -20 19 -20 12 0 -7 -5 -10 -11 -6 -8 5 -8 9 1 14 8 5 8 9 -3 13 -16
   6 -17 -9 -4 -30 5 -7 5 -19 2 -25 -4 -7 0 -5 8 4 8 10 17 15 20 11 4 -3 2 -12
   -4 -20 -9 -9 -8 -13 0 -13 6 0 11 4 11 9 0 14 38 7 59 -11 11 -9 23 -13 28
   -10 4 4 5 3 1 -1 -6 -8 26 -47 37 -47 14 1 33 -29 31 -50 0 -13 5 -25 12 -27
   6 -3 12 0 12 7 0 6 -4 9 -8 6 -5 -3 -9 1 -9 9 0 17 52 -17 70 -46 7 -11 17
   -19 24 -19 6 0 15 -9 18 -20 4 -11 10 -18 15 -15 5 3 11 1 14 -4 4 -5 1 -13
   -5 -17 -8 -5 -9 -3 -4 6 5 9 4 11 -4 6 -6 -4 -14 -1 -17 8 -3 8 -13 12 -22 9
   -15 -4 -15 -3 -2 7 13 10 13 11 -2 6 -16 -5 -23 4 -19 26 0 4 -6 5 -15 1 -9
   -3 -20 0 -25 8 -7 11 -9 11 -9 1 0 -8 9 -16 20 -19 10 -3 22 -14 25 -24 4 -10
   15 -19 26 -19 11 0 17 -5 14 -10 -4 -6 -1 -9 7 -8 7 2 12 -3 10 -10 -1 -8 1
   -11 6 -8 9 5 36 -21 40 -39 1 -5 10 -10 21 -11 10 -1 35 -11 55 -23 20 -13 36
   -20 36 -18 0 3 -17 16 -37 28 -21 13 -42 29 -46 36 -5 7 -13 10 -19 7 -7 -5
   -8 -2 -3 6 6 9 4 11 -5 5 -9 -6 -11 -4 -5 5 5 8 4 11 -3 6 -6 -3 -13 -2 -17 4
   -12 19 21 10 45 -12 14 -13 29 -21 35 -20 5 2 7 0 3 -4 -11 -10 62 -59 89 -59
   21 -1 22 0 5 19 -12 13 -13 20 -5 23 17 6 -5 63 -24 63 -8 0 -11 5 -8 10 3 6
   1 10 -6 10 -6 0 -19 8 -28 18 -9 10 -29 27 -44 37 -15 10 -26 24 -23 31 3 8 0
   11 -10 7 -9 -3 -14 1 -14 13 0 15 -2 16 -9 5 -7 -11 -10 -9 -16 8 -4 13 -9 20
   -11 18 -7 -7 -79 64 -77 74 2 5 -3 8 -10 6 -6 -1 -11 4 -9 11 1 8 -2 11 -6 8
   -14 -9 -55 31 -46 45 4 8 3 9 -5 5 -15 -10 -43 13 -34 27 3 5 1 7 -4 4 -6 -4
   -36 17 -67 46 -31 30 -58 52 -61 49 -5 -5 -8 12 -6 38 0 10 -1 11 -5 3 -4 -10
   -11 -10 -25 -2 -11 5 -17 14 -14 20 8 11 4 11 -15 -1z m450 -540 c0 -5 -5 -10
   -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z"/>
   <path d="M901 844 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z"/>
   <path d="M915 810 c-4 -6 1 -7 11 -3 11 4 15 3 10 -5 -3 -6 3 -13 14 -17 17
   -5 18 -10 9 -28 -10 -21 -9 -21 5 -3 14 17 13 21 -7 42 -24 26 -33 29 -42 14z"/>
   <path d="M1054 689 c-7 -12 6 -23 22 -19 3 1 14 -9 25 -21 10 -12 22 -19 26
   -16 3 4 4 8 2 10 -2 1 -18 15 -35 30 -24 21 -34 25 -40 16z"/>
   <path d="M1117 603 c5 -12 7 -12 14 -2 6 10 11 10 23 0 11 -9 16 -10 16 -2 0
   11 -1 12 -37 16 -15 2 -20 -2 -16 -12z"/>
   <path d="M1226 545 c4 -8 11 -15 16 -15 6 0 5 6 -2 15 -7 8 -14 15 -16 15 -2
   0 -1 -7 2 -15z"/>
   <path d="M606 378 c3 -5 10 -6 15 -3 13 9 11 12 -6 12 -8 0 -12 -4 -9 -9z"/>
   <path d="M1530 381 c0 -6 4 -13 10 -16 6 -3 7 1 4 9 -7 18 -14 21 -14 7z"/>
   <path d="M1470 307 c-12 -21 -12 -21 6 -7 10 8 20 15 22 16 2 1 -1 4 -5 7 -5
   3 -15 -4 -23 -16z"/>
   <path d="M1235 209 c-4 -6 -5 -12 -2 -15 2 -3 7 2 10 11 7 17 1 20 -8 4z"/>
   <path d="M875 160 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
   -8 -4 -11 -10z"/>
   <path d="M1589 213 c-12 -16 -12 -17 2 -6 9 7 20 9 24 5 5 -4 5 -1 1 6 -9 16
   -11 15 -27 -5z"/>
   <path d="M6 878 c3 -5 10 -6 15 -3 13 9 11 12 -6 12 -8 0 -12 -4 -9 -9z"/>
   <path d="M1960 760 c-9 -6 -10 -10 -3 -10 6 0 15 5 18 10 8 12 4 12 -15 0z"/>
   <path d="M1933 641 c0 -11 5 -18 9 -15 4 3 5 11 1 19 -7 21 -12 19 -10 -4z"/>
   <path d="M1886 564 c-19 -19 -21 -31 -3 -15 8 6 16 9 19 6 2 -3 5 2 5 10 0 19
   -2 19 -21 -1z"/>
   <path d="M1856 514 c-8 -20 -8 -24 2 -24 4 0 8 9 9 20 2 24 -3 26 -11 4z"/>
   <path d="M134 498 c-4 -7 -4 -10 1 -6 4 4 14 0 22 -10 13 -15 13 -15 3 6 -12
   25 -16 27 -26 10z"/>
   <path d="M1826 464 c-17 -16 -13 -34 7 -34 8 0 8 3 -2 9 -9 6 -10 11 -2 15 6
   4 15 4 21 1 6 -3 7 1 4 9 -8 20 -9 20 -28 0z"/>
   <path d="M1795 419 c-5 -8 -4 -10 3 -5 8 5 12 -1 13 -16 1 -18 2 -19 6 -4 6
   23 -12 43 -22 25z"/>
   <path d="M170 399 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
   -5 -10 -11z"/>
   <path d="M205 390 c-19 -8 -19 -9 -1 -9 16 -1 17 -3 5 -18 -11 -15 -11 -16 0
   -6 16 13 41 7 37 -10 -1 -7 -1 -9 1 -4 3 4 10 5 16 1 7 -3 1 4 -13 17 -14 12
   -24 26 -22 30 2 10 3 10 -23 -1z"/>
   <path d="M1746 355 c-9 -26 -7 -32 5 -12 6 10 9 21 6 23 -2 3 -7 -2 -11 -11z"/>
   <path d="M1715 330 c-4 -6 -3 -16 3 -22 13 -13 23 4 13 21 -7 10 -10 10 -16 1z"/>
   <path d="M310 251 c0 -15 18 -23 25 -12 3 6 13 7 23 4 9 -3 14 -3 11 1 -11 11
   -59 17 -59 7z"/>
   <path d="M1655 220 c-3 -6 1 -7 9 -4 18 7 21 14 7 14 -6 0 -13 -4 -16 -10z"/>
   <path d="M463 149 c-2 -17 13 -24 40 -20 4 0 7 -4 7 -9 0 -5 5 -10 11 -10 8 0
   9 4 0 13 -6 8 -7 17 -3 21 4 4 3 6 -3 5 -5 -2 -19 2 -30 8 -18 10 -21 9 -22
   -8z m32 -9 c3 -6 -1 -7 -9 -4 -18 7 -21 14 -7 14 6 0 13 -4 16 -10z"/>
   <path d="M587 83 c-3 -5 3 -15 15 -22 15 -9 18 -9 13 0 -5 7 -3 10 6 7 8 -3
   13 -10 12 -15 -1 -6 12 -9 29 -7 25 3 28 1 19 -10 -9 -11 -9 -16 0 -22 7 -4 9
   -3 5 4 -3 5 -2 12 3 14 5 1 11 9 13 17 2 10 -7 15 -28 16 -17 0 -39 7 -48 14
   -13 11 -16 11 -16 0 0 -12 -2 -12 -9 0 -5 7 -11 9 -14 4z"/>
   <animate id="one" attributeType="XML" attributeName="fill" from="black" to="#b200fc"
    dur="3s" begin="0;two.end"/>
    <animate id="two "attributeType="XML" attributeName="fill" from="#b200fc" to="black"
    begin="one.end" dur="3s"/>
   </g>
   
   </svg>
      <h1>404 - File Not Found ! </h1>
      <h1 style="margin: 0; font-size: 5rem;">¯\_(ツ)_/¯</h1>
      <p>Please contact Kovinda </p>
        
         <a  class="btn-grad" href="https://t.me/kovinda_thisal">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" style="vertical-align: bottom;" fill="white" class="bi bi-telegram" viewBox="0 0 16 16">
               <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.287 5.906c-.778.324-2.334.994-4.666 2.01-.378.15-.577.298-.595.442-.03.243.275.339.69.47l.175.055c.408.133.958.288 1.243.294.26.006.549-.1.868-.32 2.179-1.471 3.304-2.214 3.374-2.23.05-.012.12-.026.166.016.047.041.042.12.037.141-.03.129-1.227 1.241-1.846 1.817-.193.18-.33.307-.358.336a8.154 8.154 0 0 1-.188.186c-.38.366-.664.64.015 1.088.327.216.589.393.85.571.284.194.568.387.936.629.093.06.183.125.27.187.331.236.63.448.997.414.214-.02.435-.22.547-.82.265-1.417.786-4.486.906-5.751a1.426 1.426 0 0 0-.013-.315.337.337 0 0 0-.114-.217.526.526 0 0 0-.31-.093c-.3.005-.763.166-2.984 1.09z"/>
             </svg>
            Kovinda</a>
   </div>



   <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
   <script>
      particlesJS("particles-js", { "particles": { "number": { "value": 58, "density": { "enable": true, "value_area": 800 } }, "color": { "value": "#b200fc" }, "shape": { "type": "circle", "stroke": { "width": 0, "color": "#ffffff" }, "polygon": { "nb_sides": 5 }, "image": { "src": "img/github.svg", "width": 100, "height": 100 } }, "opacity": { "value": 0.5, "random": false, "anim": { "enable": false, "speed": 1, "opacity_min": 0.1, "sync": false } }, "size": { "value": 3, "random": true, "anim": { "enable": false, "speed": 40, "size_min": 0.1, "sync": false } }, "line_linked": { "enable": true, "distance": 160.24100246771155, "color": "#000000", "opacity": 0.5368073582668338, "width": 0.9614460148062693 }, "move": { "enable": true, "speed": 6, "direction": "none", "random": false, "straight": false, "out_mode": "out", "bounce": false, "attract": { "enable": false, "rotateX": 600, "rotateY": 1200 } } }, "interactivity": { "detect_on": "canvas", "events": { "onhover": { "enable": true, "mode": "grab" }, "onclick": { "enable": true, "mode": "push" }, "resize": true }, "modes": { "grab": { "distance": 316.49421789409644, "line_linked": { "opacity": 0.3206261252743821 } }, "bubble": { "distance": 400, "size": 40, "duration": 2, "opacity": 8, "speed": 3 }, "repulse": { "distance": 89.2675999188477, "duration": 0.4 }, "push": { "particles_nb": 4 }, "remove": { "particles_nb": 2 } } }, "retina_detect": true }); 

   </script>



</body>

</html>`


const SearchFunction = {
    formatSearchKeyword: function(keyword) {
        let nothing = "";
        let space = " ";
        if (!keyword) return nothing;
        return keyword.replace(/(!=)|['"=<>/\\:]/g, nothing)
            .replace(/[,，|(){}]/g, space)
            .trim()
    }

};

const DriveFixedTerms = new(class {
    default_file_fields = 'parents,id,name,mimeType,modifiedTime,createdTime,fileExtension,size';
    gd_root_type = {
        user_drive: 0,
        share_drive: 1,
        sub_folder: 2
    };
    folder_mime_type = 'application/vnd.google-apps.folder';
})();

const JSONWebToken = {
    header: {
        alg: 'RS256',
        typ: 'JWT'
    },
    importKey: async function(pemKey) {
        var pemDER = this.textUtils.base64ToArrayBuffer(pemKey.split('\n').map(s => s.trim()).filter(l => l.length && !l.startsWith('---')).join(''));
        return crypto.subtle.importKey('pkcs8', pemDER, {
            name: 'RSASSA-PKCS1-v1_5',
            hash: 'SHA-256'
        }, false, ['sign']);
    },
    createSignature: async function(text, key) {
        const textBuffer = this.textUtils.stringToArrayBuffer(text);
        return crypto.subtle.sign('RSASSA-PKCS1-v1_5', key, textBuffer)
    },
    generateGCPToken: async function(serviceAccount) {
        const iat = parseInt(Date.now() / 1000);
        var payload = {
            "iss": serviceAccount.client_email,
            "scope": "https://www.googleapis.com/auth/drive",
            "aud": "https://oauth2.googleapis.com/token",
            "exp": iat + 3600,
            "iat": iat
        };
        const encPayload = btoa(JSON.stringify(payload));
        const encHeader = btoa(JSON.stringify(this.header));
        var key = await this.importKey(serviceAccount.private_key);
        var signed = await this.createSignature(encHeader + "." + encPayload, key);
        return encHeader + "." + encPayload + "." + this.textUtils.arrayBufferToBase64(signed).replace(/\//g, '_').replace(/\+/g, '-');
    },
    textUtils: {
        base64ToArrayBuffer: function(base64) {
            var binary_string = atob(base64);
            var len = binary_string.length;
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes.buffer;
        },
        stringToArrayBuffer: function(str) {
            var len = str.length;
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = str.charCodeAt(i);
            }
            return bytes.buffer;
        },
        arrayBufferToBase64: function(buffer) {
            let binary = '';
            let bytes = new Uint8Array(buffer);
            let len = bytes.byteLength;
            for (let i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return btoa(binary);
        }
    }
};

addEventListener('fetch', event => {
    event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
    if (gds.length === 0) {
        for (let i = 0; i < authConfig.roots.length; i++) {
            const gd = new googleDrive(authConfig, i);
            await gd.init();
            gds.push(gd)
        }
        let tasks = [];
        gds.forEach(gd => {
            tasks.push(gd.initRootType());
        });
        for (let task of tasks) {
            await task;
        }
    }

    let gd;
    let url = new URL(request.url);
    let path = url.pathname;

    function redirectToIndexPage() {
        return new Response('', {
            status: 301,
            headers: {
                'Location': `${url.origin}/0:/`
            }
        });
    }

    if (path == '/') return redirectToIndexPage();
    if (path.toLowerCase() == '/arc-sw.js') {
        return fetch("https://arc.io/arc-sw.js")
    } else if (path.toLowerCase() == '/admin') {
        return Response.redirect("https://bit.ly/3sAxYwr", 301)
    }

    const command_reg = /^\/(?<num>\d+):(?<command>[a-zA-Z0-9]+)(\/.*)?$/g;
    const match = command_reg.exec(path);
    if (match) {
        const num = match.groups.num;
        const order = Number(num);
        if (order >= 0 && order < gds.length) {
            gd = gds[order];
        } else {
            return redirectToIndexPage()
        }
        for (const r = gd.basicAuthResponse(request); r;) return r;
        const command = match.groups.command;
        if (command === 'search') {
            if (request.method === 'POST') {
                return handleSearch(request, gd);
            } else {
                const params = url.searchParams;
                return new Response(html(gd.order, {
                    q: params.get("q").replace(/'/g, "").replace(/"/g, "") || '',
                    is_search_page: true,
                    root_type: gd.root_type
                }), {
                    status: 200,
                    headers: {
                        'Content-Type': 'text/html; charset=utf-8'
                    }
                });
            }
        } else if (command === 'id2path' && request.method === 'POST') {
            return handleId2Path(request, gd)
        }
    }

    const common_reg = /^\/\d+:\/.*$/g;
    try {
        if (!path.match(common_reg)) {
            return redirectToIndexPage();
        }
        let split = path.split("/");
        let order = Number(split[1].slice(0, -1));
        if (order >= 0 && order < gds.length) {
            gd = gds[order];
        } else {
            return redirectToIndexPage()
        }
    } catch (e) {
        return redirectToIndexPage()
    }

    const basic_auth_res = gd.basicAuthResponse(request);

    path = path.replace(gd.url_path_prefix, '') || '/';
    if (request.method == 'POST') {
        return basic_auth_res || apiRequest(request, gd);
    }

    let action = url.searchParams.get('a');

    if (path.substr(-1) == '/' || action != null) {
        return basic_auth_res || new Response(html(gd.order, {
            root_type: gd.root_type
        }), {
            status: 200,
            headers: {
                'Content-Type': 'text/html; charset=utf-8'
            }
        });
    } else {
        if (path.split('/').pop().toLowerCase() == ".password") {
            return basic_auth_res || new Response("", {
                status: 404
            });
        }
        let file = await gd.file(path);
        let range = request.headers.get('Range');
        const inline_down = 'true' === url.searchParams.get('inline');
        if (gd.root.protect_file_link && basic_auth_res) return basic_auth_res;
        return gd.down(file?.id, range, inline_down);
    }
}

function gdiencode(str) {
    var gdijsorg_0x40df = ['1KzJBAK', '1697708zMrtEu', '295396TasIvj', '21011Eyuayv', '1217593CxovUD', 'fromCharCode', '143062xekFCR', 'replace', '74bcHwvq', '73939wlqHSM', '2CBdqkc', '1712527AcNPoP'];
    var gdijsorg_0x5556bb = gdijsorg_0x56b1;
    (function(_0x3f3911, _0x38bce9) {
        var _0x32440e = gdijsorg_0x56b1;
        while (!![]) {
            try {
                var _0x2cab6f = -parseInt(_0x32440e(0xb3)) + -parseInt(_0x32440e(0xb7)) * -parseInt(_0x32440e(0xb6)) + -parseInt(_0x32440e(0xaf)) * -parseInt(_0x32440e(0xad)) + -parseInt(_0x32440e(0xb1)) + parseInt(_0x32440e(0xae)) + parseInt(_0x32440e(0xac)) + parseInt(_0x32440e(0xb0)) * -parseInt(_0x32440e(0xb5));
                if (_0x2cab6f === _0x38bce9) break;
                else _0x3f3911['push'](_0x3f3911['shift']());
            } catch (_0x34d506) {
                _0x3f3911['push'](_0x3f3911['shift']());
            }
        }
    }(gdijsorg_0x40df, 0xe5038));

    function gdijsorg_0x56b1(_0x1ccc20, _0x1596c4) {
        _0x1ccc20 = _0x1ccc20 - 0xac;
        var _0x40df0f = gdijsorg_0x40df[_0x1ccc20];
        return _0x40df0f;
    }
    return btoa(encodeURIComponent(str)[gdijsorg_0x5556bb(0xb4)](/%([0-9A-F]{2})/g, function toSolidBytes(_0xe8cc7f, _0x12410f) {
        var _0x1cce23 = gdijsorg_0x5556bb;
        return String[_0x1cce23(0xb2)]('0x' + _0x12410f);
    }));
}

async function apiRequest(request, gd) {
    let url = new URL(request.url);
    let path = url.pathname;
    path = path.replace(gd.url_path_prefix, '') || '/';

    let option = {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    }

    if (path.substr(-1) == '/') {
        let form = await request.formData();
        let deferred_list_result = gd.list(path, form.get('page_token'), Number(form.get('page_index')));

        if (authConfig['enable_password_file_verify']) {
            let password = await gd.password(path);
            // console.log("dir password", password);
            if (password && password.replace("\n", "") !== form.get('password')) {
                let html = `Y29kZWlzcHJvdGVjdGVk=0Xfi4icvJnclBCZy92dzNXYwJCI6ISZnF2czVWbiwSMwQDI6ISZk92YisHI6IicvJnclJyeYmFzZTY0aXNleGNsdWRlZA==`;
                return new Response(html, option);
            }
        }

        let list_result = await deferred_list_result;
        return new Response(rewrite(gdiencode(JSON.stringify(list_result), option)));
    } else {
        let file = await gd.file(path);
        let range = request.headers.get('Range');
        return new Response(rewrite(gdiencode(JSON.stringify(file))));
    }
}

// deal with search
async function handleSearch(request, gd) {
    const option = {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    };
    let form = await request.formData();
    let search_result = await
    gd.search(form.get('q') || '', form.get('page_token'), Number(form.get('page_index')));
    return new Response(rewrite(gdiencode(JSON.stringify(search_result), option)));
}

async function handleId2Path(request, gd) {
    const option = {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    };
    let form = await request.formData();
    let path = await gd.findPathById(form.get('id'));
    return new Response(path || '', option);
}

class googleDrive {
    constructor(authConfig, order) {
        this.order = order;
        this.root = authConfig.roots[order];
        this.root.protect_file_link = this.root.protect_file_link || false;
        this.url_path_prefix = `/${order}:`;
        this.authConfig = authConfig;
        this.paths = [];
        this.files = [];
        this.passwords = [];
        this.id_path_cache = {};
        this.id_path_cache[this.root['id']] = '/';
        this.paths["/"] = this.root['id'];
    }
    async init() {
        await this.accessToken();
        if (authConfig.user_drive_real_root_id) return;
        const root_obj = await (gds[0] || this).findItemById('root');
        if (root_obj && root_obj.id) {
            authConfig.user_drive_real_root_id = root_obj.id
        }
    }

    async initRootType() {
        const root_id = this.root['id'];
        const types = DriveFixedTerms.gd_root_type;
        if (root_id === 'root' || root_id === authConfig.user_drive_real_root_id) {
            this.root_type = types.user_drive;
        } else {
            const obj = await this.getShareDriveObjById(root_id);
            this.root_type = obj ? types.share_drive : types.sub_folder;
        }
    }

    basicAuthResponse(request) {
        const auth = this.root.auth || '',
            _401 = new Response(unauthorized, {
                headers: {
                    'WWW-Authenticate': `Basic realm="goindex:drive:${this.order}"`,
                    'content-type': 'text/html;charset=UTF-8'
                },
                status: 401
            });
        if (auth) {
            const _auth = request.headers.get('Authorization')
            if (_auth) {
                const [received_user, received_pass] = atob(_auth.split(' ').pop()).split(':');
                if (auth.hasOwnProperty(received_user)) {
                    if (auth[received_user] == received_pass) {
                        return null;
                    } else return _401;
                } else return _401;
            }
        } else return null;
        return _401;
    }

    async down(id, range = '', inline = false) {
        let url = `https://www.googleapis.com/drive/v3/files/${id}?alt=media`;
        let requestOption = await this.requestOption();
        requestOption.headers['Range'] = range;
        let res = await fetch(url, requestOption);
        if (res.ok) {
            const {
                headers
            } = res = new Response(res.body, res)
            this.authConfig.enable_cors_file_down && headers.append('Access-Control-Allow-Origin', '*');
            inline === true && headers.set('Content-Disposition', 'inline');
            return res;
        } 
        else if(res.status == 404){
            return new Response(not_found, {
                status: 404,
                headers: {
                    "content-type": "text/html;charset=UTF-8",
                },
            })
        }
        else {
            const res = await fetch(`${uiConfig.jsdelivr_cdn_src}@master/assets/DownloadError.html`);
            return new Response(await res.text(), {
                headers: {
                    "content-type": "text/html;charset=UTF-8",
                },
            })
        }
    }

    async file(path) {
        if (typeof this.files[path] == 'undefined') {
            this.files[path] = await this._file(path);
        }
        return this.files[path];
    }

    async _file(path) {
        let arr = path.split('/');
        let name = arr.pop();
        name = decodeURIComponent(name).replace(/\'/g, "\\'");
        let dir = arr.join('/') + '/';
        // console.log(name, dir);
        let parent = await this.findPathId(dir);
        // console.log(parent);
        let url = 'https://www.googleapis.com/drive/v3/files';
        let params = {
            'includeItemsFromAllDrives': true,
            'supportsAllDrives': true
        };
        params.q = `'${parent}' in parents and name = '${name}' and trashed = false`;
        params.fields = "files(id, name, mimeType, size ,createdTime, modifiedTime, iconLink, thumbnailLink)";
        url += '?' + this.enQuery(params);
        let requestOption = await this.requestOption();
        let response = await fetch(url, requestOption);
        let obj = await response.json();
        // console.log(obj);
        return obj.files[0];
    }

    async list(path, page_token = null, page_index = 0) {
        if (this.path_children_cache == undefined) {
            // { <path> :[ {nextPageToken:'',data:{}}, {nextPageToken:'',data:{}} ...], ...}
            this.path_children_cache = {};
        }

        if (this.path_children_cache[path] &&
            this.path_children_cache[path][page_index] &&
            this.path_children_cache[path][page_index].data
        ) {
            let child_obj = this.path_children_cache[path][page_index];
            return {
                nextPageToken: child_obj.nextPageToken || null,
                curPageIndex: page_index,
                data: child_obj.data
            };
        }

        let id = await this.findPathId(path);
        let result = await this._ls(id, page_token, page_index);
        let data = result.data;
        if (result.nextPageToken && data.files) {
            if (!Array.isArray(this.path_children_cache[path])) {
                this.path_children_cache[path] = []
            }
            this.path_children_cache[path][Number(result.curPageIndex)] = {
                nextPageToken: result.nextPageToken,
                data: data
            };
        }

        return result
    }


    async _ls(parent, page_token = null, page_index = 0) {

        if (parent == undefined) {
            return null;
        }
        let obj;
        let params = {
            'includeItemsFromAllDrives': true,
            'supportsAllDrives': true
        };
        params.q = `'${parent}' in parents and trashed = false AND name !='.password'`;
        params.orderBy = 'folder,name,modifiedTime desc';
        params.fields = "nextPageToken, files(id, name, mimeType, size , modifiedTime)";
        params.pageSize = this.authConfig.files_list_page_size;

        if (page_token) {
            params.pageToken = page_token;
        }
        let url = 'https://www.googleapis.com/drive/v3/files';
        url += '?' + this.enQuery(params);
        let requestOption = await this.requestOption();
        let response = await fetch(url, requestOption);
        obj = await response.json();

        return {
            nextPageToken: obj.nextPageToken || null,
            curPageIndex: page_index,
            data: obj
        };
    }

    async password(path) {
        if (this.passwords[path] !== undefined) {
            return this.passwords[path];
        }

        let file = await this.file(path + '.password');
        if (file == undefined) {
            this.passwords[path] = null;
        } else {
            let url = `https://www.googleapis.com/drive/v3/files/${file.id}?alt=media`;
            let requestOption = await this.requestOption();
            let response = await this.fetch200(url, requestOption);
            this.passwords[path] = await response.text();
        }

        return this.passwords[path];
    }

    async getShareDriveObjById(any_id) {
        if (!any_id) return null;
        if ('string' !== typeof any_id) return null;

        let url = `https://www.googleapis.com/drive/v3/drives/${any_id}`;
        let requestOption = await this.requestOption();
        let res = await fetch(url, requestOption);
        let obj = await res.json();
        if (obj && obj.id) return obj;

        return null
    }

    async search(origin_keyword, page_token = null, page_index = 0) {
        const types = DriveFixedTerms.gd_root_type;
        const is_user_drive = this.root_type === types.user_drive;
        const is_share_drive = this.root_type === types.share_drive;

        const empty_result = {
            nextPageToken: null,
            curPageIndex: page_index,
            data: null
        };

        if (!is_user_drive && !is_share_drive) {
            return empty_result;
        }
        let keyword = SearchFunction.formatSearchKeyword(origin_keyword);
        if (!keyword) {
            return empty_result;
        }
        let words = keyword.split(/\s+/);
        let name_search_str = `name contains '${words.join("' AND name contains '")}'`;
        let params = {};
        if (is_user_drive) {
            params.corpora = 'user'
        }
        if (is_share_drive) {
            params.corpora = 'drive';
            params.driveId = this.root.id;
            params.includeItemsFromAllDrives = true;
            params.supportsAllDrives = true;
        }
        if (page_token) {
            params.pageToken = page_token;
        }
        params.q = `trashed = false AND name !='.password' AND (${name_search_str})`;
        params.fields = "nextPageToken, files(id, name, mimeType, size , modifiedTime)";
        params.pageSize = this.authConfig.search_result_list_page_size;
        params.orderBy = 'folder,name,modifiedTime desc';

        let url = 'https://www.googleapis.com/drive/v3/files';
        url += '?' + this.enQuery(params);
        let requestOption = await this.requestOption();
        let response = await fetch(url, requestOption);
        let res_obj = await response.json();

        return {
            nextPageToken: res_obj.nextPageToken || null,
            curPageIndex: page_index,
            data: res_obj
        };
    }

    async findParentFilesRecursion(child_id, contain_myself = true) {
        const gd = this;
        const gd_root_id = gd.root.id;
        const user_drive_real_root_id = authConfig.user_drive_real_root_id;
        const is_user_drive = gd.root_type === DriveFixedTerms.gd_root_type.user_drive;
        const target_top_id = is_user_drive ? user_drive_real_root_id : gd_root_id;
        const fields = DriveFixedTerms.default_file_fields;
        const parent_files = [];
        let meet_top = false;

        async function addItsFirstParent(file_obj) {
            if (!file_obj) return;
            if (!file_obj.parents) return;
            if (file_obj.parents.length < 1) return;
            let p_ids = file_obj.parents;
            if (p_ids && p_ids.length > 0) {
                const first_p_id = p_ids[0];
                if (first_p_id === target_top_id) {
                    meet_top = true;
                    return;
                }
                const p_file_obj = await gd.findItemById(first_p_id);
                if (p_file_obj && p_file_obj.id) {
                    parent_files.push(p_file_obj);
                    await addItsFirstParent(p_file_obj);
                }
            }
        }

        const child_obj = await gd.findItemById(child_id);
        if (contain_myself) {
            parent_files.push(child_obj);
        }
        await addItsFirstParent(child_obj);

        return meet_top ? parent_files : null
    }

    async findPathById(child_id) {
        if (this.id_path_cache[child_id]) {
            return this.id_path_cache[child_id];
        }

        const p_files = await this.findParentFilesRecursion(child_id);
        if (!p_files || p_files.length < 1) return '';

        let cache = [];
        // Cache the path and id of each level found
        p_files.forEach((value, idx) => {
            const is_folder = idx === 0 ? (p_files[idx].mimeType === DriveFixedTerms.folder_mime_type) : true;
            let path = '/' + p_files.slice(idx).map(it => it.name).reverse().join('/');
            if (is_folder) path += '/';
            cache.push({
                id: p_files[idx].id,
                path: path
            })
        });

        cache.forEach((obj) => {
            this.id_path_cache[obj.id] = obj.path;
            this.paths[obj.path] = obj.id
        });
        return cache[0].path;
    }

    async findItemById(id) {
        const is_user_drive = this.root_type === DriveFixedTerms.gd_root_type.user_drive;
        let url = `https://www.googleapis.com/drive/v3/files/${id}?fields=${DriveFixedTerms.default_file_fields}${is_user_drive ? '' : '&supportsAllDrives=true'}`;
        let requestOption = await this.requestOption();
        let res = await fetch(url, requestOption);
        return await res.json()
    }

    async findPathId(path) {
        let c_path = '/';
        let c_id = this.paths[c_path];

        let arr = path.trim('/').split('/');
        for (let name of arr) {
            c_path += name + '/';

            if (typeof this.paths[c_path] == 'undefined') {
                let id = await this._findDirId(c_id, name);
                this.paths[c_path] = id;
            }

            c_id = this.paths[c_path];
            if (c_id == undefined || c_id == null) {
                break;
            }
        }
        return this.paths[path];
    }

    async _findDirId(parent, name) {
        name = decodeURIComponent(name).replace(/\'/g, "\\'");
        if (parent == undefined) {
            return null;
        }

        let url = 'https://www.googleapis.com/drive/v3/files';
        let params = {
            'includeItemsFromAllDrives': true,
            'supportsAllDrives': true
        };
        params.q = `'${parent}' in parents and mimeType = 'application/vnd.google-apps.folder' and name = '${name}'  and trashed = false`;
        params.fields = "nextPageToken, files(id, name, mimeType)";
        url += '?' + this.enQuery(params);
        let requestOption = await this.requestOption();
        let response = await fetch(url, requestOption);
        let obj = await response.json();
        if (obj.files[0] == undefined) {
            return null;
        }
        return obj.files[0].id;
    }

    async accessToken() {
        console.log("accessToken");
        if (this.authConfig.expires == undefined || this.authConfig.expires < Date.now()) {
            const obj = await this.fetchAccessToken();
            if (obj.access_token != undefined) {
                this.authConfig.accessToken = obj.access_token;
                this.authConfig.expires = Date.now() + 3500 * 1000;
            }
        }
        return this.authConfig.accessToken;
    }

    async fetchAccessToken() {
        console.log("fetchAccessToken");
        const url = "https://www.googleapis.com/oauth2/v4/token";
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };
        var post_data;
        if (this.authConfig.service_account && typeof this.authConfig.service_account_json != "undefined") {
            const jwttoken = await JSONWebToken.generateGCPToken(this.authConfig.service_account_json);
            post_data = {
                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                assertion: jwttoken,
            };
        } else {
            post_data = {
                client_id: this.authConfig.client_id,
                client_secret: this.authConfig.client_secret,
                refresh_token: this.authConfig.refresh_token,
                grant_type: "refresh_token",
            };
        }

        let requestOption = {
            'method': 'POST',
            'headers': headers,
            'body': this.enQuery(post_data)
        };

        const response = await fetch(url, requestOption);
        return await response.json();
    }

    async fetch200(url, requestOption) {
        let response;
        for (let i = 0; i < 3; i++) {
            response = await fetch(url, requestOption);
            console.log(response.status);
            if (response.status != 403) {
                break;
            }
            await this.sleep(800 * (i + 1));
        }
        return response;
    }

    async requestOption(headers = {}, method = 'GET') {
        const accessToken = await this.accessToken();
        headers['authorization'] = 'Bearer ' + accessToken;
        return {
            'method': method,
            'headers': headers
        };
    }

    enQuery(data) {
        const ret = [];
        for (let d in data) {
            ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));
        }
        return ret.join('&');
    }

    sleep(ms) {
        return new Promise(function(resolve, reject) {
            let i = 0;
            setTimeout(function() {
                console.log('sleep' + ms);
                i++;
                if (i >= 2) reject(new Error('i>=2'));
                else resolve(i);
            }, ms);
        })
    }
}

function rewrite(str) {
    var gdijsorg_0x4e46 = ['join', 'YmFzZTY0aXNleGNsdWRlZA==', '377943YNHRVT', '133527xcoEHq', '138191tQqett', '4JgyeDu', '299423DYjNuN', '622qCMSPH', 'reverse', 'split', '950361qrHraF', '1PjZtJR', '120619DeiSfH', '1153ekVsUn'];

    function gdijsorg_0x276f(_0x37674d, _0x2582b3) {
        _0x37674d = _0x37674d - 0x162;
        var _0x4e46db = gdijsorg_0x4e46[_0x37674d];
        return _0x4e46db;
    }
    var gdijsorg_0x3f8728 = gdijsorg_0x276f;
    (function(_0x4d8ef8, _0x302a25) {
        var _0x83f66b = gdijsorg_0x276f;
        while (!![]) {
            try {
                var _0x396eb3 = parseInt(_0x83f66b(0x16c)) * -parseInt(_0x83f66b(0x164)) + -parseInt(_0x83f66b(0x162)) * -parseInt(_0x83f66b(0x163)) + -parseInt(_0x83f66b(0x16b)) + -parseInt(_0x83f66b(0x167)) + -parseInt(_0x83f66b(0x169)) * -parseInt(_0x83f66b(0x16a)) + parseInt(_0x83f66b(0x168)) + parseInt(_0x83f66b(0x16f));
                if (_0x396eb3 === _0x302a25) break;
                else _0x4d8ef8['push'](_0x4d8ef8['shift']());
            } catch (_0x2dc29f) {
                _0x4d8ef8['push'](_0x4d8ef8['shift']());
            }
        }
    }(gdijsorg_0x4e46, 0x588f3));
    var sa = str[gdijsorg_0x3f8728(0x16e)](''),
        ra = sa[gdijsorg_0x3f8728(0x16d)](),
        ja = ra[gdijsorg_0x3f8728(0x165)](''),
        aj = 'Y29kZWlzcHJvdGVjdGVk' + ja + gdijsorg_0x3f8728(0x166);
    return aj;
}

String.prototype.trim = function(char) {
    if (char) {
        return this.replace(new RegExp('^\\' + char + '+|\\' + char + '+$', 'g'), '');
    }
    return this.replace(/^\s+|\s+$/g, '');
};